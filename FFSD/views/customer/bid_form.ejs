<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Construction Project Submission Form</title>
    <style>
      :root {
        --primary: #2c3e50;
        --secondary: #d4af37;
        --accent: #3498db;
        --light: #f8f9fa;
        --dark: #2c3e50;
        --gray: #6c757d;
        --light-gray: #e9ecef;
        --shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      }

      * {
        box-sizing: border-box;
        font-family: "Segoe UI", Arial, sans-serif;
      }

      body {
        background-color: var(--light-gray);
        margin: 0;
        padding: 30px;
      }

      .container {
        max-width: 900px;
        margin: 0 auto;
        background-color: white;
        padding: 40px;
        border-radius: 12px;
        box-shadow: var(--shadow);
      }

      h1 {
        text-align: center;
        color: var(--primary);
        font-weight: 700;
        margin-bottom: 30px;
        position: relative;
      }

      h1::after {
        content: "";
        display: block;
        width: 80px;
        height: 4px;
        background: var(--secondary);
        margin: 8px auto 0;
        border-radius: 4px;
      }

      .form-section {
        margin-bottom: 40px;
        padding-bottom: 25px;
        border-bottom: 1px solid var(--light-gray);
      }

      .form-section h2 {
        color: var(--primary);
        margin-bottom: 15px;
        font-size: 1.4rem;
        border-left: 4px solid var(--secondary);
        padding-left: 10px;
        position: relative;
      }

      .form-group {
        margin-bottom: 20px;
      }

      label {
        display: block;
        margin-bottom: 6px;
        font-weight: 600;
        color: var(--primary);
      }

      input,
      textarea,
      select {
        width: 100%;
        padding: 12px;
        border: 1px solid lightslategray;
        border-radius: 6px;
        font-size: 15px;
        transition: border-color 0.3s, box-shadow 0.3s;
      }

      input:focus,
      textarea:focus,
      select:focus {
        border-color: var(--accent);
        outline: none;
        box-shadow: 0 0 6px rgba(52, 152, 219, 0.2);
      }

      textarea {
        height: 100px;
        resize: vertical;
      }

      .floor-container {
        border: 1px solid var(--light-gray);
        padding: 15px 20px;
        margin-bottom: 15px;
        border-radius: 6px;
        background-color: var(--light);
        box-shadow: var(--shadow);
      }

      .floor-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
      }

      .btn {
        padding: 10px 18px;
        background-color: var(--accent);
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 15px;
        transition: background-color 0.3s, transform 0.2s;
      }

      .btn:hover {
        background-color: #2176b5;
        transform: translateY(-1px);
      }

      .btn-remove {
        background-color: #e74c3c;
      }

      .btn-remove:hover {
        background-color: #c0392b;
      }

      .submit-section {
        text-align: center;
      }

      .submit-btn {
        background-color: var(--secondary);
        color: var(--dark);
        padding: 14px 40px;
        font-size: 17px;
        font-weight: 600;
        letter-spacing: 0.5px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.3s;
      }

      .submit-btn:hover {
        background-color: #c7a133;
      }

      .required:after {
        content: " *";
        color: red;
      }

      .error-message {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 5px;
        display: none;
      }

      .image-preview {
        max-width: 100%;
        max-height: 200px;
        margin-top: 10px;
        display: none;
        border-radius: 6px;
        border: 1px solid var(--light-gray);
      }

      select {
        appearance: none;
        background-image: linear-gradient(
            45deg,
            transparent 50%,
            var(--secondary) 50%
          ),
          linear-gradient(135deg, var(--secondary) 50%, transparent 50%);
        background-position: calc(100% - 20px) calc(1em + 2px),
          calc(100% - 15px) calc(1em + 2px);
        background-size: 5px 5px, 5px 5px;
        background-repeat: no-repeat;
        padding: 12px 40px 12px 12px;
        cursor: pointer;
      }

      select:focus {
        border-color: var(--accent);
        outline: none;
        box-shadow: 0 0 6px rgba(52, 152, 219, 0.2);
      }

      .grid-2 {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
      }

      @media (max-width: 768px) {
        .grid-2 {
          grid-template-columns: 1fr;
        }

        .container {
          padding: 20px;
        }

        h1 {
          font-size: 1.8rem;
        }

        .form-section h2 {
          font-size: 1.2rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="title-block">
        <h1>Construction Project Submission</h1>
        <span class="underline"></span>
      </div>

      <form
        id="bidForm"
        method="post"
        enctype="multipart/form-data"
        action="/bidForm_Submit"
        novalidate
      >
        <div class="form-section">
          <h2>Project Information</h2>
          <div class="grid-2">
            <div class="form-group">
              <label for="projectName" class="required">Project Name</label>
              <input type="text" id="projectName" name="projectName" required />
              <div class="error-message" id="projectNameError">
                This field is required
              </div>
            </div>
            <div class="form-group">
              <label for="buildingType" class="required">Building Type</label>
              <select id="buildingType" name="buildingType" required>
                <option value="">Select Building Type</option>
                <option value="residential">Residential</option>
                <option value="commercial">Commercial</option>
                <option value="industrial">Industrial</option>
                <option value="mixedUse">Mixed Use</option>
                <option value="other">Other</option>
              </select>
              <div class="error-message" id="buildingTypeError">
                This field is required
              </div>
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2>Customer Information</h2>
          <div class="grid-2">
            <div class="form-group">
              <label for="customerName" class="required">Full Name</label>
              <input
                type="text"
                id="customerName"
                name="customerName"
                required
              />
              <div class="error-message" id="customerNameError">
                This field is required
              </div>
            </div>
            <div class="form-group">
              <label for="customerEmail" class="required">Email Address</label>
              <input
                type="email"
                id="customerEmail"
                name="customerEmail"
                required
              />
              <div class="error-message" id="customerEmailError">
                Please enter a valid email address
              </div>
            </div>
          </div>

          <div class="form-group">
            <label for="customerPhone" class="required">Phone Number</label>
            <input
              type="tel"
              id="customerPhone"
              name="customerPhone"
              required
            />
            <div class="error-message" id="customerPhoneError">
              Please enter a valid 10-digit phone number
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2>Project Details</h2>

          <div class="form-group">
            <label for="projectAddress" class="required">Project Address</label>
            <textarea
              id="projectAddress"
              name="projectAddress"
              required
            ></textarea>
            <div class="error-message" id="projectAddressError">
              This field is required
            </div>
          </div>

          <div class="grid-2">
            <div class="form-group">
              <label for="projectLocation" class="required"
                >Project Location Pincode</label
              >
              <input
                type="text"
                id="projectLocation"
                name="projectLocation"
                placeholder="e.g., 534260"
                required
              />
              <div class="error-message" id="projectLocationError">
                Please enter a valid 6-digit pincode
              </div>
            </div>

            <div class="form-group">
              <label for="totalArea" class="required"
                >Total Building Area (square meters)</label
              >
              <input
                type="number"
                id="totalArea"
                name="totalArea"
                step="1"
                min="1"
                required
              />
              <div class="error-message" id="totalAreaError">
                Please enter a valid area (positive number)
              </div>
            </div>
          </div>

          <div class="grid-2">
            <div class="form-group">
              <label for="estimatedBudget" class="required"
                >Max Budget â‚¹</label
              >
              <input
                type="number"
                id="estimatedBudget"
                name="estimatedBudget"
                min="10000000"
                required
              />
              <div class="error-message" id="estimatedBudgetError">
                Please enter a budget greater than â‚¹1,00,00,000
              </div>
            </div>

            <div class="form-group">
              <label for="projectTimeline" class="required"
                >Expected Timeline (months)</label
              >
              <input
                type="number"
                id="projectTimeline"
                name="projectTimeline"
                min="1"
                required
              />
              <div class="error-message" id="projectTimelineError">
                Please enter a valid timeline (positive number)
              </div>
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2>Floor Plans</h2>
          <div class="form-group">
            <label for="totalFloors" class="required">Number of Floors</label>
            <input
              type="number"
              id="totalFloors"
              name="totalFloors"
              min="1"
              required
            />
            <div class="error-message" id="totalFloorsError">
              Please enter a valid number of floors (positive number)
            </div>
          </div>

          <div id="floorDetails"></div>

          <button type="button" id="generateFloors" class="btn">
            Generate Floor Details
          </button>
        </div>

        <div class="form-section">
          <h2>Additional Requirements</h2>
          <div class="form-group">
            <label for="specialRequirements" class="required"
              >Special Requirements or Considerations</label
            >
            <textarea
              id="specialRequirements"
              name="specialRequirements"
              placeholder="List any special requirements, materials, or design considerations"
              required
            ></textarea>
            <div class="error-message" id="specialRequirementsError">
              This field is required
            </div>
          </div>

          <div class="grid-2">
            <div class="form-group">
              <label for="accessibilityNeeds" class="required"
                >Accessibility Needs</label
              >
              <select id="accessibilityNeeds" name="accessibilityNeeds" required>
                <option value="">Select Options</option>
                <option value="wheelchair">Wheelchair Accessibility</option>
                <option value="elevators">Elevators</option>
                <option value="ramps">Ramps</option>
                <option value="other">Other</option>
                <option value="none">None</option>
              </select>
              <div class="error-message" id="accessibilityNeedsError">
                This field is required
              </div>
            </div>

            <div class="form-group">
              <label for="energyEfficiency" class="required"
                >Energy Efficiency Goals</label
              >
              <select id="energyEfficiency" name="energyEfficiency" required>
                <option value="">Select Options</option>
                <option value="standard">Standard</option>
                <option value="leed">LEED Certified</option>
                <option value="passive">Passive House</option>
                <option value="netZero">Net Zero</option>
                <option value="other">Other</option>
              </select>
              <div class="error-message" id="energyEfficiencyError">
                This field is required
              </div>
            </div>
          </div>

          <div class="form-group">
            <label for="siteFiles">Site Plans or Additional Documents (Optional)</label>
            <input type="file" id="siteFiles" name="siteFiles" multiple />
          </div>
        </div>

        <div class="submit-section">
          <div class="error-message" id="formError"></div>
          <button type="submit" class="btn submit-btn">Submit Project</button>
        </div>
      </form>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("bidForm");
        const generateFloorsBtn = document.getElementById("generateFloors");
        const floorDetailsContainer = document.getElementById("floorDetails");

        // Generate floor details based on the number of floors
        generateFloorsBtn.addEventListener("click", function () {
          const totalFloorsInput = document.getElementById("totalFloors");
          const totalFloorsError = document.getElementById("totalFloorsError");
          const totalFloors = parseInt(totalFloorsInput.value);

          if (isNaN(totalFloors) || totalFloors < 1) {
            totalFloorsError.textContent =
              "Please enter a valid number of floors (positive number)";
            totalFloorsError.style.display = "block";
            totalFloorsInput.style.borderColor = "red";
            floorDetailsContainer.innerHTML = "";
            return;
          } else {
            totalFloorsError.style.display = "none";
            totalFloorsInput.style.borderColor = "lightslategray";
          }

          floorDetailsContainer.innerHTML = "";

          for (let i = 1; i <= totalFloors; i++) {
            const floorDiv = document.createElement("div");
            floorDiv.className = "floor-container";
            floorDiv.id = `floor-${i}`;

            floorDiv.innerHTML = `
              <div class="floor-header">
                <h3>Floor ${i}</h3>
                <button type="button" class="btn btn-remove" onclick="removeFloor(${i})">Remove</button>
              </div>
              <input type="hidden" name="floors[${i - 1}][floorNumber]" value="${i}">
              <div class="grid-2">
                <div class="form-group">
                  <label for="floorType-${i}" class="required">Floor Type</label>
                  <select id="floorType-${i}" name="floors[${i - 1}][floorType]" required>
                    <option value="">Select Floor Type</option>
                    <option value="residential">Residential</option>
                    <option value="commercial">Commercial</option>
                    <option value="parking">Parking</option>
                    <option value="mechanical">Mechanical/Utility</option>
                    <option value="other">Other</option>
                  </select>
                  <div class="error-message" id="floorTypeError-${i}">
                    This field is required
                  </div>
                </div>
                <div class="form-group">
                  <label for="floorArea-${i}" class="required">Floor Area (sq meters)</label>
                  <input
                    type="number"
                    id="floorArea-${i}"
                    name="floors[${i - 1}][floorArea]"
                    step="1"
                    min="1"
                    required
                  />
                  <div class="error-message" id="floorAreaError-${i}">
                    Please enter a valid floor area (positive number)
                  </div>
                </div>
              </div>
              <div class="form-group">
                <label for="floorDescription-${i}" class="required">Floor Description</label>
                <textarea
                  id="floorDescription-${i}"
                  name="floors[${i - 1}][floorDescription]"
                  placeholder="Describe the layout and purpose of this floor"
                  required
                ></textarea>
                <div class="error-message" id="floorDescriptionError-${i}">
                  This field is required
                </div>
              </div>
              <div class="form-group">
                <label for="floorImage-${i}">Floor Plan Image (Optional)</label>
                <input
                  type="file"
                  id="floorImage-${i}"
                  name="floorImages"
                  accept="application/pdf,image/jpeg,image/png"
                  onchange="previewImage(this, 'imagePreview-${i}')"
                />
                <img
                  id="imagePreview-${i}"
                  class="image-preview"
                  src="#"
                  alt="Floor Plan Preview"
                />
              </div>
            `;

            floorDetailsContainer.appendChild(floorDiv);
          }
        });

        // Form submission with validation
        form.addEventListener("submit", function (e) {
          e.preventDefault();

          // Reset all error messages and borders
          document.querySelectorAll(".error-message").forEach((error) => {
            error.style.display = "none";
          });
          document
            .querySelectorAll("input, select, textarea")
            .forEach((field) => {
              field.style.borderColor = "lightslategray";
            });

          let isValid = true;

          // Validate static required fields
          const staticFields = [
            {
              id: "projectName",
              errorId: "projectNameError",
              message: "This field is required",
            },
            {
              id: "buildingType",
              errorId: "buildingTypeError",
              message: "This field is required",
            },
            {
              id: "customerName",
              errorId: "customerNameError",
              message: "This field is required",
            },
            {
              id: "customerEmail",
              errorId: "customerEmailError",
              message: "Please enter a valid email address",
              validate: (value) =>
                /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value),
            },
            {
              id: "customerPhone",
              errorId: "customerPhoneError",
              message: "Please enter a valid 10-digit phone number",
              validate: (value) => {
                let digits = value.replace(/\D/g, "");
                if (digits.startsWith("0")) digits = digits.slice(1);
                return /^\d{10}$/.test(digits);
              },
            },
            {
              id: "projectAddress",
              errorId: "projectAddressError",
              message: "This field is required",
            },
            {
              id: "projectLocation",
              errorId: "projectLocationError",
              message: "Please enter a valid 6-digit pincode",
              validate: (value) => /^\d{6}$/.test(value),
            },
            {
              id: "totalArea",
              errorId: "totalAreaError",
              message: "Please enter a valid area (positive number)",
              validate: (value) => parseFloat(value) > 0,
            },
            {
              id: "estimatedBudget",
              errorId: "estimatedBudgetError",
              message: "Please enter a budget greater than â‚¹1,00,00,000",
              validate: (value) => parseFloat(value) > 10000000,
            },
            {
              id: "projectTimeline",
              errorId: "projectTimelineError",
              message: "Please enter a valid timeline (positive number)",
              validate: (value) => parseFloat(value) > 0,
            },
            {
              id: "totalFloors",
              errorId: "totalFloorsError",
              message: "Please enter a valid number of floors (positive number)",
              validate: (value) => parseInt(value) > 0,
            },
            {
              id: "specialRequirements",
              errorId: "specialRequirementsError",
              message: "This field is required",
            },
            {
              id: "accessibilityNeeds",
              errorId: "accessibilityNeedsError",
              message: "This field is required",
            },
            {
              id: "energyEfficiency",
              errorId: "energyEfficiencyError",
              message: "This field is required",
            },
          ];

          staticFields.forEach((field) => {
            const element = document.getElementById(field.id);
            const errorElement = document.getElementById(field.errorId);
            const value = element.value.trim();

            if (!value || (element.tagName === "SELECT" && value === "")) {
              isValid = false;
              errorElement.style.display = "block";
              element.style.borderColor = "red";
            } else if (field.validate && !field.validate(value)) {
              isValid = false;
              errorElement.style.display = "block";
              element.style.borderColor = "red";
            } else {
              errorElement.style.display = "none";
              element.style.borderColor = "lightslategray";
            }
          });

          // Validate dynamic floor fields
          const floorContainers =
            floorDetailsContainer.querySelectorAll(".floor-container");
          if (
            floorContainers.length === 0 &&
            parseInt(document.getElementById("totalFloors").value) > 0
          ) {
            isValid = false;
            document.getElementById("totalFloors").style.borderColor = "red";
            document.getElementById("totalFloorsError").style.display = "block";
            document.getElementById("totalFloorsError").textContent =
              "Please generate floor details";
          } else {
            floorContainers.forEach((container, index) => {
              const i = index + 1;
              const floorType = document.getElementById(`floorType-${i}`);
              const floorArea = document.getElementById(`floorArea-${i}`);
              const floorDescription = document.getElementById(
                `floorDescription-${i}`
              );
              const floorTypeError = document.getElementById(
                `floorTypeError-${i}`
              );
              const floorAreaError = document.getElementById(
                `floorAreaError-${i}`
              );
              const floorDescriptionError = document.getElementById(
                `floorDescriptionError-${i}`
              );

              if (!floorType.value) {
                isValid = false;
                floorTypeError.style.display = "block";
                floorType.style.borderColor = "red";
              } else {
                floorTypeError.style.display = "none";
                floorType.style.borderColor = "lightslategray";
              }

              if (!floorArea.value || parseFloat(floorArea.value) <= 0) {
                isValid = false;
                floorAreaError.style.display = "block";
                floorArea.style.borderColor = "red";
              } else {
                floorAreaError.style.display = "none";
                floorArea.style.borderColor = "lightslategray";
              }

              if (!floorDescription.value.trim()) {
                isValid = false;
                floorDescriptionError.style.display = "block";
                floorDescription.style.borderColor = "red";
              } else {
                floorDescriptionError.style.display = "none";
                floorDescription.style.borderColor = "lightslategray";
              }
            });
          }

          if (!isValid) {
            const formError = document.getElementById("formError");
            formError.textContent =
              "Please correct the errors in the form before submitting";
            formError.style.display = "block";
            return;
          }

          // If validation passes, submit the form natively
          form.submit();
        });

        window.removeFloor = function (floorNumber) {
          const floorElement = document.getElementById(`floor-${floorNumber}`);
          if (floorElement) {
            floorElement.remove();
          }
        };

        window.previewImage = function (input, previewId) {
          const preview = document.getElementById(previewId);
          if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function (e) {
              preview.src = e.target.result;
              preview.style.display = "block";
            };
            reader.readAsDataURL(input.files[0]);
          } else {
            preview.style.display = "none";
            preview.src = "#";
          }
        };

        // Auto-generate floors on totalFloors change
        document
          .getElementById("totalFloors")
          .addEventListener("change", function () {
            if (parseInt(this.value) > 0) {
              generateFloorsBtn.click();
            } else {
              floorDetailsContainer.innerHTML = "";
              document.getElementById("totalFloorsError").style.display = "none";
              this.style.borderColor = "lightslategray";
            }
          });
      });
    </script>
  </body>
</html>