<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #1a237e;
            --secondary-color: #e67e22;
            --light-color: #f9f9f9;
            --dark-color: #333;
            --border-color: #ddd;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }
        body {
            background-color: #f4f4f4;
            color: var(--dark-color);
            line-height: 1.6;
        }
        .settings-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        .settings-header {
            margin-bottom: 2rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 1rem;
        }
        .settings-header h1 {
            color: var(--primary-color);
            font-size: 2rem;
        }
        .settings-header p {
            color: #666;
            margin-top: 0.5rem;
        }
        .settings-grid {
            display: grid;
            grid-template-columns: 280px 1fr; /* Adjusted sidebar width */
            gap: 2rem;
        }
        .settings-sidebar {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }
        .settings-nav {
            list-style: none;
        }
        .settings-nav li {
            margin-bottom: 0.5rem;
        }
        .settings-nav a {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            color: var(--dark-color);
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        .settings-nav a:hover, .settings-nav a.active {
            background-color: var(--primary-color);
            color: white;
        }
        .settings-nav a i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
            font-size: 1.1rem;
        }
        .settings-content {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
            padding: 2rem;
        }
        .settings-section {
            display: none;
        }
        .settings-section.active {
            display: block;
            animation: fadeIn 0.5s;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .settings-section h2 {
            font-size: 1.75rem;
            color: var(--primary-color);
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border-color);
        }
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 1rem;
        }
        .btn {
            padding: 0.75rem 1.5rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease;
        }
        .btn:hover { background-color: #0d1757; }
        .btn-danger { background-color: var(--danger-color); }
        .btn-danger:hover { background-color: #c0392b; }

        /* New Profile Display Styles */
        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
        }
        .profile-image-large {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 2rem;
            border: 4px solid #e0e0e0;
        }
        .profile-title-info h2 {
             margin-bottom: 0.5rem;
             border: none;
             padding: 0;
        }
        .profile-title-info p {
            color: #555;
            font-size: 1.1rem;
        }
        .profile-section-divider {
            margin: 2rem 0;
        }
        .profile-section-divider h3 {
            font-size: 1.25rem;
            color: var(--dark-color);
            margin-bottom: 1rem;
        }
        .project {
            margin-bottom: 1.5rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }
        .project:last-child {
            border-bottom: none;
        }
        .project h4 {
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
        }
        .project p {
            color: #555;
            line-height: 1.6;
            margin-bottom: 5px;
        }
        .project-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 10px;
            margin-top: 1rem;
        }
        .action-buttons {
            margin-top: 2rem;
        }
    </style>
</head>
<body>
    <%- include('worker_navbar') %>
    <div class="settings-container">
        <div class="settings-header">
            <h1>Account Settings</h1>
            <p>Manage your professional profile and account preferences</p>
        </div>
        <div class="settings-grid">
            <div class="settings-sidebar">
                <ul class="settings-nav">
                    <li><a href="#profile" class="active"><i class="fas fa-user-circle"></i> Profile</a></li>
                    <li><a href="#availability"><i class="fas fa-calendar-check"></i> Availability</a></li>
                    <li><a href="#security"><i class="fas fa-lock"></i> Security</a></li>
                    <li><a href="#logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </div>
            <div class="settings-content">
                <div id="profile" class="settings-section active">
                    <div class="profile-header">
                        <img src="<%= user.profileImage || 'https://t4.ftcdn.net/jpg/03/64/21/11/360_F_364211147_1qgLVxv1Tcq0Ohz3FawUfrtONzz8nq3e.jpg' %>" alt="<%= user.name %>" class="profile-image-large">
                        <div class="profile-title-info">
                            <h2><%= user.name %></h2>
                            <p><strong><%= user.professionalTitle || 'Professional' %></strong> with <%= user.experience || 0 %> years experience</p>
                        </div>
                    </div>
                    
                    <div class="profile-section-divider">
                        <h3>About</h3>
                        <p><%= user.about %></p>
                        <p><strong>Specialties:</strong> <%= user.specialties.join(', ') %></p>
                    </div>

                    <div class="profile-section-divider">
                        <h3>Notable Projects</h3>
                        <% if (user.projects && user.projects.length > 0) { %>
                            <% user.projects.forEach(project => { %>
                                <div class="project">
                                    <h4><%= project.name %> (<%= project.year %>)</h4>
                                    <p><strong>Location:</strong> <%= project.location %></p>
                                    <p><%= project.description %></p>
                                    <img src="<%= project.image %>" alt="<%= project.name %>" class="project-image">
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No projects have been added yet.</p>
                        <% } %>
                    </div>
                    
                    <div class="action-buttons">
                        <a style="text-decoration: none;" href="/worker_edit?id=<%= user._id %>" class="btn">Edit Full Profile</a>
                    </div>
                </div>

                <div id="availability" class="settings-section">
                    <h2>Availability Status</h2>
                    <form id="availability-form">
                        <div class="form-group">
                            <label for="availability-status">Set your current availability for new projects</label>
                            <select id="availability-status" class="form-control">
                                <option value="available" <%= user.availability === 'available' ? 'selected' : '' %>>Available</option>
                                <option value="busy" <%= user.availability === 'busy' ? 'selected' : '' %>>Busy</option>
                                <option value="unavailable" <%= user.availability === 'unavailable' ? 'selected' : '' %>>Unavailable</option>
                            </select>
                        </div>
                        <button type="submit" class="btn">Update Availability</button>
                    </form>
                </div>

                <div id="security" class="settings-section">
                    <h2>Security Settings</h2>
                    <form id="updatePasswordForm">
                        <div class="form-group">
                            <label for="currentPassword">Current Password</label>
                            <input type="password" id="currentPassword" class="form-control">
                        </div>
                        <div class="form-group">
                            <label for="newPassword">New Password</label>
                            <input type="password" id="newPassword" class="form-control">
                        </div>
                        <div class="form-group">
                            <label for="confirmPassword">Confirm New Password</label>
                            <input type="password" id="confirmPassword" class="form-control">
                        </div>
                        <button type="submit" class="btn">Update Password</button>
                    </form>
                </div>
                
                <div id="logout" class="settings-section">
                    <h2>Logout</h2>
                    <p>Are you sure you want to log out of your account?</p>
                    <a href="/logout" class="btn btn-danger" style="margin-top: 1rem;">Logout</a>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.settings-nav a');
            const sections = document.querySelectorAll('.settings-section');

            // This is our main function to switch tabs
            function showTab(tabId) {
                const targetLink = document.querySelector(`.settings-nav a[href="${tabId}"]`);
                const targetSection = document.querySelector(tabId);

                if (targetLink && targetSection) {
                    // Deactivate all other links and sections
                    navLinks.forEach(l => l.classList.remove('active'));
                    sections.forEach(s => s.classList.remove('active'));

                    // Activate the correct link and section
                    targetLink.classList.add('active');
                    targetSection.classList.add('active');
                }
            }

            // Add click listeners to all navigation links
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('href');
                    
                    // Only update history if the hash is actually different
                    if (window.location.hash !== targetId) {
                        history.pushState(null, null, targetId);
                    }
                    
                    showTab(targetId);
                });
            });

            // This function reads the URL hash and shows the correct tab
            function handleHashChange() {
                const hash = window.location.hash || '#profile'; // Default to #profile if no hash exists
                showTab(hash);
            }

            // 1. Handle the initial page load
            handleHashChange();

            // 2. NEW: Listen for when the hash changes (e.g., from the navbar or browser back/forward buttons)
            window.addEventListener('hashchange', handleHashChange);

            // ... (Your other script logic for the availability form, etc., remains the same) ...
            const availabilityForm = document.getElementById('availability-form');
            if(availabilityForm) {
                availabilityForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const availability = document.getElementById('availability-status').value;

                    try {
                        const response = await fetch('/worker/availability', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ availability })
                        });
                        const data = await response.json();
                        if (response.ok) {
                            alert('Availability updated successfully!');
                        } else {
                            alert(data.message || 'Failed to update availability.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred. Please try again.');
                    }
                });
            }
             const updatePasswordForm = document.getElementById('updatePasswordForm');
            if (updatePasswordForm) {
                updatePasswordForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const currentPassword = document.getElementById('currentPassword').value;
                    const newPassword = document.getElementById('newPassword').value;
                    const confirmPassword = document.getElementById('confirmPassword').value;

                    if (newPassword !== confirmPassword) {
                        alert('New password and confirmation do not match.');
                        return;
                    }

                    try {
                        const response = await fetch('/worker/password/update', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ currentPassword, newPassword })
                        });

                        const data = await response.json();

                        if (response.ok) {
                            alert('Password updated successfully!');
                            updatePasswordForm.reset(); // Clear the form fields
                        } else {
                            alert(data.message || 'Failed to update password.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    </script>
</body>
</html>