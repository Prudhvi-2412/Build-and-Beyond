<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Build & Beyond</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <style>
    /* --- CORPORATE/ESTABLISHED COLOR PALETTE --- */
    :root {
        --primary-accent: #004D7A;       /* Deep Navy Blue */
        --primary-accent-hover: #003355; 
        --background-light: #F8F9FA;     /* Main Page BG */
        --content-light: #FFFFFF;        /* Card BG */
        --text-primary: #212529;         /* Main Dark Text */
        --text-secondary: #6C757D;       /* Medium Gray Text */
        --highlight-color: #A06700;      /* Muted Gold/Amber */
        --border-light: #D1D5DB;         /* Soft Border */
        --soft-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --card-radius: 8px;
        --button-secondary-bg: #E9ECEF;
        --light-accent-bg: #E6F0F8; 

        /* Status & Action Colors */
        --success-color: #10B981; /* Changed to match JS alert for consistency */
        --danger-color: #EF4444;
        --danger-color-darker: #DC2626;

        /* Mapped Variables for cleanup from old theme to keep original JS logic working */
        --background-dark: var(--content-light); 
        --content-dark: var(--content-light); /* Added to support new body/container styles */
        --border-dark: var(--border-light); 
        --text-dark: var(--content-light);
    }
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
    }
    body {
        background-color: var(--background-light);
        color: var(--text-primary);
        line-height: 1.6;
        -webkit-font-smoothing: antialiased;
    }
    
    /* --- MAIN LAYOUT --- */
    .settings-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
    }
    .settings-header {
        margin-bottom: 2rem;
        border-bottom: 3px solid var(--primary-accent); /* Strong header line */
        padding-bottom: 1rem;
    }
    .settings-header h1 {
        color: var(--primary-accent);
        font-size: 2.5rem;
        font-weight: 700;
    }
    .settings-header p {
        color: var(--text-secondary);
        margin-top: 0.5rem;
        font-size: 1rem;
    }
    .settings-grid {
        display: grid;
        grid-template-columns: 280px 1fr; /* Wider sidebar */
        gap: 2rem;
        align-items: flex-start;
    }
    
    /* --- SIDEBAR NAVIGATION --- */
    .settings-sidebar, .settings-content {
        background-color: var(--content-light);
        border-radius: var(--card-radius);
        border: 1px solid var(--border-light);
        box-shadow: var(--soft-shadow);
    }
    .settings-sidebar {
        padding: 1rem 0; /* Padding inside list items */
    }
    .settings-nav {
        list-style: none;
    }
    .settings-nav li {
        margin-bottom: 0;
    }
    .settings-nav a {
        display: flex;
        align-items: center;
        padding: 0.8rem 1.5rem;
        color: var(--text-secondary);
        text-decoration: none;
        transition: all 0.2s ease;
        font-weight: 600;
        border-left: 4px solid transparent;
    }
    .settings-nav a:hover {
        background-color: var(--button-secondary-bg);
        color: var(--text-primary);
    }
    .settings-nav a.active {
        background-color: var(--light-accent-bg);
        color: var(--primary-accent);
        border-left-color: var(--primary-accent);
    }
    .settings-nav a i {
        margin-right: 1rem;
        width: 20px;
        text-align: center;
    }
    
    /* --- MAIN CONTENT AREA --- */
    .settings-content {
        padding: 2rem;
    }
    .settings-section {
        margin-bottom: 2rem;
        display: none;
        animation: fadeIn 0.3s ease;
    }
    .settings-section.active {
        display: block;
    }
    .settings-section h2 {
        color: var(--text-primary);
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid var(--border-light);
    }
    
    /* --- PROFILE TABS (Worker/Customer) --- */
    .profile-tabs {
        display: flex;
        border-bottom: 2px solid var(--border-light);
        margin-bottom: 1.5rem;
    }
    .profile-tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        color: var(--text-secondary);
        font-weight: 500;
        transition: all 0.2s ease;
    }
    .profile-tab.active {
        border-bottom-color: var(--primary-accent);
        font-weight: 700;
        color: var(--primary-accent);
    }
    .profile-content {
        display: none;
        animation: fadeIn 0.3s ease;
    }
    .profile-content.active {
        display: block;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* --- FORM STYLING (Display Mode & Edit Mode) --- */
    .form-group {
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px dashed #E0E0E0;
    }
    .form-group:last-of-type {
        border-bottom: none;
        padding-bottom: 0;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: var(--text-secondary);
        font-size: 0.9rem;
        text-transform: uppercase;
    }
    
    /* Display Mode Paragraphs */
    .settings-section p { 
        color: var(--text-primary);
        font-weight: 500;
        margin: 0;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--border-light);
        border-radius: 6px;
        font-size: 1rem;
        background-color: var(--background-light);
        color: var(--text-primary);
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
    }
    .form-control:focus {
        outline: none;
        border-color: var(--primary-accent);
        box-shadow: 0 0 0 3px rgba(0, 77, 122, 0.2);
        background-color: var(--content-light);
    }
    textarea.form-control {
        min-height: 100px;
        resize: vertical;
    }
    
    /* Dynamic List Styling */
    #worker-profile-display .current-opening-item h4 {
        color: var(--primary-accent);
        font-weight: 600;
        font-size: 1rem;
    }
    /* Re-purposing the old class name for display mode rows */
    #worker-profile-display .current-opening-item, 
    #customer-profile-display .team-member, 
    #customer-profile-display .team-project-items {
        display: flex;
        flex-direction: row;
        align-items: center; /* Center vertically for team member/opening */
        padding: 0.5rem 0;
        border: none;
        margin-bottom: 0.5rem;
    }
    /* Override for the project items that need flex-start */
    #customer-profile-display .team-project-items.project-item { 
         align-items: flex-start;
    }

    .skills-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    .skill-tag {
        background-color: var(--light-accent-bg);
        color: var(--primary-accent);
        padding: 0.35rem 0.75rem;
        border-radius: 4px;
        font-size: 0.85rem;
        font-weight: 600;
        border: 1px solid var(--primary-accent);
    }

    /* Customer Profile Specific Display Styles */
    #customer-profile-display .team-member img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 1rem;
        object-fit: cover; /* Added for consistency */
        border: 2px solid var(--border-light);
    }
    #customer-profile-display .project-item img {
        width: 100px;
        height: 70px;
        border-radius: 4px;
        margin-right: 1rem;
        object-fit: cover; /* Added for consistency */
    }
    .team-member-info h4, .project-info h4 {
        color: var(--primary-accent);
        font-weight: 600;
        margin-bottom: 0.25rem; /* Re-added margin for spacing */
    }
    .team-member-info p, .project-info p {
        color: var(--text-secondary);
        font-size: 0.9rem;
    }
    .team-project-items .project-info {
        flex: 1;
    }
    .did-you-know {
        background-color: var(--light-accent-bg);
        padding: 1.5rem;
        border-radius: var(--card-radius);
        border-left: 5px solid var(--highlight-color);
        margin-bottom: 1.5rem; /* Changed margin-top to margin-bottom for better flow */
        margin-top: 1rem;
    }
    .did-you-know h4 {
        color: var(--highlight-color);
        margin-bottom: 0.5rem;
        font-weight: 700;
    }
    
    /* Edit Mode Dynamic Inputs */
    .dynamic-item-edit {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 0.5rem;
    }
    .dynamic-item-edit .form-control {
        flex-grow: 1;
    }
    .company-size-selector {
        display: flex;
        gap: 1rem;
        margin-top: 0.5rem;
        flex-wrap: wrap;
    }
    .company-size-option {
        flex: 1;
        min-width: 120px;
        text-align: center;
        padding: 0.75rem;
        border: 1px solid var(--border-light);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        background-color: var(--button-secondary-bg);
        font-weight: 500;
    }
    .company-size-option.selected {
        border-color: var(--primary-accent);
        background-color: var(--light-accent-bg);
        color: var(--primary-accent);
        font-weight: 600;
    }
    .company-size-option input {
        display: none;
    }
    /* Team Member and Project Edit Overrides (to match the old styles they depend on) */
    .team-member, .project-item {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 1rem;
        padding: 1rem;
        border: 1px solid var(--border-dark);
        border-radius: 8px;
        transition: background-color 0.2s ease;
        background-color: var(--content-light); /* Ensure they stand out in the edit form */
    }
    .team-member img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 1rem;
    }
    .project-item img {
        width: 120px;
        height: 80px;
        object-fit: cover;
        margin-right: 1rem;
        border-radius: 6px;
    }
    /* Adjustments for the Help Center boxes to use new colors but remain visible */
    .settings-section#help-center .did-you-know {
        background-color: var(--content-light) !important; 
        border: 1px solid var(--border-light) !important; 
        border-left: 4px solid var(--primary-accent) !important;
        padding: 1rem;
        border-radius: var(--card-radius);
    }

    /* --- FORM VALIDATION STYLES --- */
    .error-message {
        color: var(--danger-color);
        font-size: 0.8rem;
        margin-top: 0.25rem;
        display: none;
    }
    .form-control.error {
        border-color: var(--danger-color);
    }
    .form-control.success {
        border-color: var(--success-color);
    }
    .password-requirements {
        margin-top: 0.5rem;
        font-size: 0.8rem;
        color: var(--text-secondary);
    }
    .requirement {
        display: flex;
        align-items: center;
        margin-bottom: 0.25rem;
    }
    .requirement i {
        margin-right: 0.5rem;
        font-size: 0.7rem;
    }
    .requirement.valid {
        color: var(--success-color);
    }
    .requirement.invalid {
        color: var(--text-secondary);
    }

    /* --- BUTTONS --- */
    .btn {
        padding: 0.8rem 1.5rem;
        background-color: var(--primary-accent);
        color: var(--text-dark);
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 700;
        transition: all 0.2s ease;
        box-shadow: 0 3px 6px rgba(0, 77, 122, 0.2);
    }
    .btn:hover {
        background-color: var(--primary-accent-hover);
        transform: translateY(-2px);
    }
    .btn-secondary {
        background-color: var(--button-secondary-bg);
        color: var(--text-primary);
        border: 1px solid var(--border-light);
        box-shadow: none;
        font-weight: 600;
    }
    .btn-secondary:hover {
        background-color: #D1D5DB;
        color: var(--text-primary);
    }
    .btn-danger {
        background-color: var(--danger-color);
        color: var(--content-light);
        box-shadow: 0 3px 6px rgba(239, 68, 68, 0.2);
    }
    .btn-danger:hover {
        background-color: var(--danger-color-darker);
    }
    
    /* --- Responsive --- */
    @media (max-width: 992px) {
        .settings-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        .settings-sidebar {
            padding: 1.5rem;
        }
        .settings-nav {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .settings-nav a {
            flex-grow: 1;
            text-align: center;
            border-left: none;
            border-bottom: 4px solid transparent;
            border-radius: 4px;
            padding: 0.8rem 0.5rem;
        }
        .settings-nav a i {
             margin-right: 0.5rem;
        }
        .settings-nav a.active {
            border-bottom-color: var(--primary-accent);
        }
    }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <%- include('navbar_company') %>
    <div class="settings-container">
        <div class="settings-header">
            <h1>Company Settings</h1>
            <p>Manage your company profile and settings</p>
        </div>
        <div class="settings-grid">
            <div class="settings-sidebar">
                <ul class="settings-nav">
                    <li><a href="#profile" class="active"><i class="fas fa-building"></i> Company Profile</a></li>
                    <li><a href="#security"><i class="fas fa-lock"></i> Security</a></li>
                    <li><a href="#help-center"><i class="fas fa-question-circle"></i> Help Center</a></li>
                    <li><a href="#logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </div>
            <div class="settings-content">
                <div id="profile" class="settings-section active">
                    <h2>Company Profile</h2>
                    
                    <div class="profile-tabs">
                        <div class="profile-tab active" data-tab="worker">Worker Profile</div>
                        <div class="profile-tab" data-tab="customer">Customer Profile</div>
                    </div>
                    
                    <div id="worker-profile" class="profile-content active">
                        <div id="worker-profile-display">
                            <div class="form-group">
                                <label>Company Name</label>
                                <p><%= company.workerProfile.name %></p>
                            </div>
                            <div class="form-group">
                                <label>Location</label>
                                <p><%= company.workerProfile.location %></p>
                            </div>
                            <div class="form-group">
                                <label>Company Size</label>
                                <p><%= company.workerProfile.size %> Employees</p>
                            </div>
                            <div class="form-group">
                                <label>Specializations</label>
                                <div class="skills-tags">
                                    <% company.workerProfile.specializations.forEach(spec => { %>
                                        <span class="skill-tag"><%= spec %></span>
                                    <% }) %>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Current Openings</label>
                                <% company.workerProfile.currentOpenings.forEach(opening => { %>
                                    <div class="current-opening-item">
                                        <h4><%= opening %></h4>
                                    </div>
                                <% }) %>
                            </div>
                            <div class="form-group">
                                <label>About the Company</label>
                                <p><%= company.workerProfile.about %></p>
                            </div>
                            <div class="form-group">
                                <label>Why Join Our Team?</label>
                                <p><%= company.workerProfile.whyJoin %></p>
                            </div>
                            <button id="edit-worker-profile-btn" class="btn">Edit Worker Profile</button>
                        </div>
                        
                        <form id="worker-profile-edit" style="display: none;">
                            <div class="form-group">
                                <label for="companyName">Company Name</label>
                                <input type="text" id="companyName" class="form-control" value="<%= company.workerProfile.name %>" readonly>
                            </div>
                            <div class="form-group">
                                <label for="companyLocation">Location</label>
                                <input type="text" id="companyLocation" class="form-control" value="<%= company.workerProfile.location %>" required>
                                <div class="error-message" id="location-error">Please enter a valid location</div>
                            </div>
                            <div class="form-group">
                                <label>Company Size</label>
                                <div class="company-size-selector">
                                    <% const sizes = ["1-10", "11-50", "51-200", "201-1000", "1000+"]; %>
                                    <% sizes.forEach(size => { %>
                                        <label class="company-size-option <%= company.workerProfile.size === size ? 'selected' : '' %>">
                                            <input type="radio" name="companySize" value="<%= size %>" <%= company.workerProfile.size === size ? 'checked' : '' %> required> <%= size %> Employees
                                        </label>
                                    <% }) %>
                                </div>
                                <div class="error-message" id="company-size-error">Please select a company size</div>
                            </div>
                            <div class="form-group">
                                <label for="specializations">Specializations (comma separated)</label>
                                <input type="text" id="specializations" class="form-control" value="<%= company.workerProfile.specializations.join(', ') %>" required>
                                <div class="error-message" id="specializations-error">Please enter at least one specialization</div>
                            </div>
                            <div class="form-group" id="openings-container">
                                <label>Current Openings</label>
                                <% company.workerProfile.currentOpenings.forEach(opening => { %>
                                    <div class="dynamic-item-edit">
                                        <input type="text" class="form-control" value="<%= opening %>" required>
                                        <button type="button" class="btn btn-danger" onclick="this.parentElement.remove()">Remove</button>
                                    </div>
                                <% }) %>
                                <div class="error-message" id="openings-error">Please enter at least one current opening</div>
                                <button type="button" id="add-opening-btn" class="btn btn-secondary" style="margin-top: 0.5rem;">+ Add Opening</button>
                            </div>
                            <div class="form-group">
                                <label for="aboutCompany">About the Company</label>
                                <textarea id="aboutCompany" class="form-control" required><%= company.workerProfile.about %></textarea>
                                <div class="error-message" id="about-error">Please provide information about your company</div>
                            </div>
                            <div class="form-group">
                                <label for="whyJoinUs">Why Join Our Team?</label>
                                <textarea id="whyJoinUs" class="form-control" required><%= company.workerProfile.whyJoin %></textarea>
                                <div class="error-message" id="why-join-error">Please provide reasons to join your team</div>
                            </div>
                            <button type="button" id="cancel-worker-edit-btn" class="btn btn-secondary" style="margin-right: 1rem;">Cancel</button>
                            <button type="submit" class="btn">Save Changes</button>
                        </form>
                    </div>
                    
                    <div id="customer-profile" class="profile-content">
                        <div id="customer-profile-display">
                            <div class="form-group">
                                <label>Company Name</label>
                                <p><%= company.customerProfile.name %></p>
                            </div>
                            <div class="form-group">
                                <label>Location</label>
                                <p><%= company.customerProfile.location %></p>
                            </div>
                            <div class="form-group">
                                <label>Projects Completed</label>
                                <p><%= company.customerProfile.projectsCompleted %></p>
                            </div>
                            <div class="form-group">
                                <label>Years in Business</label>
                                <p><%= company.customerProfile.yearsInBusiness %></p>
                            </div>
                            <div class="form-group">
                                <label>About Company For Customers</label>
                                <p><%= company.customerProfile.about %></p>
                            </div>
                            <div class="form-group">
                                <label>Team Members</label>
                                <% company.customerProfile.teamMembers.forEach(member => { %>
                                    <div class="team-member team-project-items">
                                        <img src="<%= member.image %>" alt="<%= member.name %>" >
                                        <div class="team-member-info">
                                            <h4><%= member.name %></h4>
                                            <p><%= member.position %></p>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                            <div class="form-group">
                                <label>Completed Projects</label>
                                <% company.customerProfile.completedProjects.forEach(project => { %>
                                    <div class="project-item team-project-items">
                                        <img src="<%= project.image %>" alt="<%= project.title %>">
                                        <div class="project-info">
                                            <h4><%= project.title %></h4>
                                            <p><%= project.description %></p>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                            <div class="did-you-know">
                                <h4>Did You Know?</h4>
                                <p><%= company.customerProfile.didYouKnow %></p>
                            </div>
                            <button id="edit-customer-profile-btn" class="btn">Edit Customer Profile</button>
                        </div>
                        
                        <form id="customer-profile-edit" style="display: none;">
                           <div class="form-group">
                                <label for="customerCompanyName">Company Name</label>
                                <input type="text" id="customerCompanyName" class="form-control" value="<%= company.customerProfile.name %>" readonly>
                            </div>
                            <div class="form-group">
                                <label for="customerCompanyLocation">Location</label>
                                <input type="text" id="customerCompanyLocation" class="form-control" value="<%= company.customerProfile.location %>" required>
                                <div class="error-message" id="customer-location-error">Please enter a valid location</div>
                            </div>
                            <div class="form-group">
                                <label for="projectsCompleted">Projects Completed</label>
                                <input type="number" id="projectsCompleted" class="form-control" value="<%= company.customerProfile.projectsCompleted %>" min="0" required>
                                <div class="error-message" id="projects-completed-error">Please enter a valid number of completed projects</div>
                            </div>
                            <div class="form-group">
                                <label for="yearsInBusiness">Years in Business</label>
                                <input type="number" id="yearsInBusiness" class="form-control" value="<%= company.customerProfile.yearsInBusiness %>" min="0" max="100" required>
                                <div class="error-message" id="years-error">Please enter a valid number of years in business</div>
                            </div>
                            <div class="form-group">
                                <label for="customerAboutCompany">About the Company</label>
                                <textarea id="customerAboutCompany" class="form-control" required><%= company.customerProfile.about %></textarea>
                                <div class="error-message" id="customer-about-error">Please provide information about your company</div>
                            </div>
                            <div class="form-group" id="team-member-container">
                                <label>Team Members</label>
                                <% company.customerProfile.teamMembers.forEach((member, index) => { %>
                                    <div class="team-member">
                                        <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                            <img src="<%= member.image %>" alt="Team Member" style="margin-right: 1rem;width: 15vw;">
                                            <input type="file" id="member<%= index %>Image" name="memberImages" style="display: none;" onchange="updateImagePreview(this)">
                                            <button type="button" class="btn btn-secondary" onclick="document.getElementById('member<%= index %>Image').click()">Change Image</button>
                                        </div>
                                        <input type="text" class="form-control" value="<%= member.name %>" style="margin-bottom: 0.5rem;" required>
                                        <input type="text" class="form-control" value="<%= member.position %>" required>
                                        <button type="button" class="btn btn-danger" style="margin-top: 0.5rem;" onclick="this.closest('.team-member').remove()">Remove</button>
                                    </div>
                                <% }) %>
                                <div class="error-message" id="team-members-error">Please add at least one team member</div>
                                <button type="button" id="add-team-member-btn" class="btn btn-secondary" style="margin-top: 0.5rem;">+ Add Team Member</button>
                            </div>
                            <div class="form-group" id="project-container">
                                <label>Completed Projects</label>
                                <% company.customerProfile.completedProjects.forEach((project, index) => { %>
                                <div class="project-item">
                                    <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                        <img src="<%= project.image %>" alt="Project" style="margin-right: 1rem; width: 15vw;">
                                        <input type="file" id="project<%= index %>Image" name="projectImages" style="display: none;" onchange="updateImagePreview(this)">
                                        <button type="button" class="btn btn-secondary" onclick="document.getElementById('project<%= index %>Image').click()">Change Image</button>
                                    </div>
                                    <input type="text" class="form-control" value="<%= project.title %>" style="margin-bottom: 0.5rem;" required>
                                    <textarea class="form-control" required><%= project.description %></textarea>
                                    <button type="button" class="btn btn-danger" style="margin-top: 0.5rem;" onclick="this.closest('.project-item').remove()">Remove</button>
                                </div>
                                <% }) %>
                                <div class="error-message" id="projects-error">Please add at least one completed project</div>
                                <button type="button" id="add-project-btn" class="btn btn-secondary" style="margin-top: 0.5rem;">+ Add Project</button>
                            </div>
                            <div class="form-group">
                                <label for="didYouKnow">Did You Know?</label>
                                <textarea id="didYouKnow" class="form-control" required><%= company.customerProfile.didYouKnow %></textarea>
                                <div class="error-message" id="did-you-know-error">Please provide an interesting fact about your company</div>
                            </div>
                            <button type="button" id="cancel-customer-edit-btn" class="btn btn-secondary" style="margin-right: 1rem;">Cancel</button>
                            <button type="submit" class="btn">Save Changes</button>
                        </form>
                    </div>
                </div>

                <div id="security" class="settings-section">
                    <h2>Security Settings</h2>
                    <form id="security-form">
                        <div class="form-group">
                            <label for="currentPassword">Current Password</label>
                            <input type="password" id="currentPassword" class="form-control" required>
                            <div class="error-message" id="current-password-error">Please enter your current password</div>
                        </div>
                        <div class="form-group">
                            <label for="newPassword">New Password</label>
                            <input type="password" id="newPassword" class="form-control" required>
                            <div class="password-requirements">
                                <div class="requirement invalid" id="length-req">
                                    <i class="fas fa-circle"></i> At least 8 characters
                                </div>
                                <div class="requirement invalid" id="uppercase-req">
                                    <i class="fas fa-circle"></i> At least one uppercase letter
                                </div>
                                <div class="requirement invalid" id="lowercase-req">
                                    <i class="fas fa-circle"></i> At least one lowercase letter
                                </div>
                                <div class="requirement invalid" id="number-req">
                                    <i class="fas fa-circle"></i> At least one number
                                </div>
                                <div class="requirement invalid" id="special-req">
                                    <i class="fas fa-circle"></i> At least one special character
                                </div>
                            </div>
                            <div class="error-message" id="new-password-error">Please enter a valid new password</div>
                        </div>
                        <div class="form-group">
                            <label for="confirmPassword">Confirm New Password</label>
                            <input type="password" id="confirmPassword" class="form-control" required>
                            <div class="error-message" id="confirm-password-error">Passwords do not match</div>
                        </div>
                        <button type="submit" class="btn">Update Password</button>
                        <hr style="margin: 2rem 0;">
                    </form>
                </div>

                <div id="help-center" class="settings-section">
                    <h2>Help Center</h2>
                    <div style="margin-bottom: 2rem;">
                        <h3 style="margin-bottom: 1rem; color: var(--text-primary);">Frequently Asked Questions</h3>
                        <div class="did-you-know" style="background-color: var(--background-dark); border: 1px solid var(--border-dark); margin-bottom: 1rem; border-left: 4px solid var(--primary-accent);">
                            <div>
                                <span style="font-weight: 600; color: var(--text-primary);">How do I create a new project?</span>
                                <p style="margin-top: 0.5rem; color: var(--text-secondary);">Go to the Dashboard and click on the "New Project" button in the top right corner.</p>
                            </div>
                        </div>
                        <div class="did-you-know" style="background-color: var(--background-dark); border: 1px solid var(--border-dark); margin-bottom: 1rem; border-left: 4px solid var(--primary-accent);">
                            <div>
                                <span style="font-weight: 600; color: var(--text-primary);">How do I invite team members?</span>
                                <p style="margin-top: 0.5rem; color: var(--text-secondary);">Navigate to your project, click on "Team" tab, and use the "Invite Member" button.</p>
                            </div>
                        </div>
                        <div class="did-you-know" style="background-color: var(--background-dark); border: 1px solid var(--border-dark); margin-bottom: 1rem; border-left: 4px solid var(--primary-accent);">
                            <div>
                                <span style="font-weight: 600; color: var(--text-primary);">How can I track my project's budget?</span>
                                <p style="margin-top: 0.5rem; color: var(--text-secondary);">Use the "Finances" tab within your project to track expenses and compare with your budget.</p>
                            </div>
                        </div>
                    </div>
                    <div style="margin-bottom: 2rem;">
                        <h3 style="margin-bottom: 1rem; color: var(--text-primary);">Support Options</h3>
                        <button class="btn" style="margin-right: 1rem;">Contact Support</button>
                    </div>
                </div>

                <div id="logout" class="settings-section">
                    <h2>Logout</h2>
                    <div style="margin-bottom: 2rem;">
                        <p style="margin-bottom: 1.5rem;">Are you sure you want to log out of your account?</p>
                        <a href="/logout"><button class="btn btn-danger">Logout</button></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        // --- Dynamic Content & Helper Functions ---

        // Helper to update image preview on file selection
        function updateImagePreview(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    // Get the img element (it's the first child of the div that contains the input/button)
                    const img = input.closest('div').querySelector('img');
                    if (img) {
                        img.src = e.target.result;
                    }
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
        
        function createTeamMemberInput() {
            // Generate a unique ID for the new file input
            const newMemberIndex = document.querySelectorAll('#customer-profile-edit .team-member').length + 1;
            const newFileId = `member${newMemberIndex}Image`;
            
            const div = document.createElement('div');
            div.classList.add('team-member');
            div.style.marginTop = '1rem';
            div.innerHTML = `
                <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                    <img src="https://via.placeholder.com/60x60" alt="New Team Member" style="margin-right: 1rem; width: 60px; height: 60px; border-radius: 50%; object-fit: cover;">
                    <input type="file" id="${newFileId}" name="memberImages" style="display: none;" onchange="updateImagePreview(this)">
                    <button type="button" class="btn btn-secondary" onclick="document.getElementById('${newFileId}').click()">Change Image</button>
                </div>
                <input type="text" class="form-control" value="" placeholder="New Member Name" style="margin-bottom: 0.5rem;" required>
                <input type="text" class="form-control" value="" placeholder="Position/Title" required>
                <button type="button" class="btn btn-danger" style="margin-top: 0.5rem;" onclick="this.closest('.team-member').remove()">Remove</button>
            `;
            return div;
        }

        function createProjectInput() {
            // Generate a unique ID for the new file input
            const newProjectIndex = document.querySelectorAll('#customer-profile-edit .project-item').length + 1;
            const newFileId = `project${newProjectIndex}Image`;
            
            const div = document.createElement('div');
            div.classList.add('project-item');
            div.style.marginTop = '1rem';
            div.innerHTML = `
                <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                    <img src="https://via.placeholder.com/120x80" alt="New Project" style="margin-right: 1rem; width: 120px; height: 80px; border-radius: 6px; object-fit: cover;">
                    <input type="file" id="${newFileId}" name="projectImages" style="display: none;" onchange="updateImagePreview(this)">
                    <button type="button" class="btn btn-secondary" onclick="document.getElementById('${newFileId}').click()">Change Image</button>
                </div>
                <input type="text" class="form-control" value="" placeholder="New Project Title" style="margin-bottom: 0.5rem;" required>
                <textarea class="form-control" placeholder="A brief description of the new project." required></textarea>
                <button type="button" class="btn btn-danger" style="margin-top: 0.5rem;" onclick="this.closest('.project-item').remove()">Remove</button>
            `;
            return div;
        }
        
        // Helper function to show alerts
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.style.position = 'fixed';
            alertDiv.style.top = '20px';
            alertDiv.style.right = '20px';
            alertDiv.style.padding = '15px 20px';
            alertDiv.style.borderRadius = '4px';
            alertDiv.style.color = 'white';
            alertDiv.style.zIndex = '1000';
            alertDiv.style.boxShadow = '0 4px 8px rgba(0,0,0,0.3)';
            
            // NOTE: Using direct color for alerts in JS since CSS variables in JS are complex
            alertDiv.style.backgroundColor = type === 'success' ? '#10B981' : '#EF4444'; 
            alertDiv.textContent = message;
            
            document.body.appendChild(alertDiv);
            setTimeout(() => {
                alertDiv.style.transition = 'opacity 0.5s ease-out';
                alertDiv.style.opacity = '0';
                setTimeout(() => document.body.removeChild(alertDiv), 500);
            }, 3000);
        }

        // --- FORM VALIDATION FUNCTIONS ---
        
        // Validate password strength
        function validatePassword(password) {
            const requirements = {
                length: password.length >= 8,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /[0-9]/.test(password),
                special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
            };
            
            // Update UI for each requirement
            document.getElementById('length-req').className = requirements.length ? 'requirement valid' : 'requirement invalid';
            document.getElementById('uppercase-req').className = requirements.uppercase ? 'requirement valid' : 'requirement invalid';
            document.getElementById('lowercase-req').className = requirements.lowercase ? 'requirement valid' : 'requirement invalid';
            document.getElementById('number-req').className = requirements.number ? 'requirement valid' : 'requirement invalid';
            document.getElementById('special-req').className = requirements.special ? 'requirement valid' : 'requirement invalid';
            
            // All requirements must be met
            return Object.values(requirements).every(req => req);
        }
        
        // Show error message for a field
        function showError(inputId, errorId, message) {
            const input = document.getElementById(inputId);
            const error = document.getElementById(errorId);
            
            if (input && error) {
                input.classList.add('error');
                input.classList.remove('success');
                error.textContent = message;
                error.style.display = 'block';
            }
        }
        
        // Clear error message for a field
        function clearError(inputId, errorId) {
            const input = document.getElementById(inputId);
            const error = document.getElementById(errorId);
            
            if (input && error) {
                input.classList.remove('error');
                input.classList.add('success');
                error.style.display = 'none';
            }
        }
        
        // Validate worker profile form
        function validateWorkerProfile() {
            let isValid = true;
            
            // Validate location
            const location = document.getElementById('companyLocation').value.trim();
            if (!location) {
                showError('companyLocation', 'location-error', 'Please enter a valid location');
                isValid = false;
            } else {
                clearError('companyLocation', 'location-error');
            }
            
            // Validate company size
            const companySize = document.querySelector('input[name="companySize"]:checked');
            if (!companySize) {
                document.getElementById('company-size-error').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('company-size-error').style.display = 'none';
            }
            
            // Validate specializations
            const specializations = document.getElementById('specializations').value.trim();
            if (!specializations) {
                showError('specializations', 'specializations-error', 'Please enter at least one specialization');
                isValid = false;
            } else {
                clearError('specializations', 'specializations-error');
            }
            
            // Validate openings
            const openings = document.querySelectorAll('#openings-container .dynamic-item-edit input');
            const hasOpenings = Array.from(openings).some(input => input.value.trim());
            if (!hasOpenings) {
                document.getElementById('openings-error').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('openings-error').style.display = 'none';
            }
            
            // Validate about company
            const aboutCompany = document.getElementById('aboutCompany').value.trim();
            if (!aboutCompany) {
                showError('aboutCompany', 'about-error', 'Please provide information about your company');
                isValid = false;
            } else {
                clearError('aboutCompany', 'about-error');
            }
            
            // Validate why join us
            const whyJoinUs = document.getElementById('whyJoinUs').value.trim();
            if (!whyJoinUs) {
                showError('whyJoinUs', 'why-join-error', 'Please provide reasons to join your team');
                isValid = false;
            } else {
                clearError('whyJoinUs', 'why-join-error');
            }
            
            return isValid;
        }
        
        // Validate customer profile form
        function validateCustomerProfile() {
            let isValid = true;
            
            // Validate location
            const location = document.getElementById('customerCompanyLocation').value.trim();
            if (!location) {
                showError('customerCompanyLocation', 'customer-location-error', 'Please enter a valid location');
                isValid = false;
            } else {
                clearError('customerCompanyLocation', 'customer-location-error');
            }
            
            // Validate projects completed
            const projectsCompleted = document.getElementById('projectsCompleted').value;
            if (!projectsCompleted || isNaN(projectsCompleted) || projectsCompleted < 0) {
                showError('projectsCompleted', 'projects-completed-error', 'Please enter a valid number of completed projects');
                isValid = false;
            } else {
                clearError('projectsCompleted', 'projects-completed-error');
            }
            
            // Validate years in business
            const yearsInBusiness = document.getElementById('yearsInBusiness').value;
            if (!yearsInBusiness || isNaN(yearsInBusiness) || yearsInBusiness < 0 || yearsInBusiness > 100) {
                showError('yearsInBusiness', 'years-error', 'Please enter a valid number of years in business (0-100)');
                isValid = false;
            } else {
                clearError('yearsInBusiness', 'years-error');
            }
            
            // Validate about company
            const aboutCompany = document.getElementById('customerAboutCompany').value.trim();
            if (!aboutCompany) {
                showError('customerAboutCompany', 'customer-about-error', 'Please provide information about your company');
                isValid = false;
            } else {
                clearError('customerAboutCompany', 'customer-about-error');
            }
            
            // Validate team members
            const teamMembers = document.querySelectorAll('#customer-profile-edit .team-member');
            const hasTeamMembers = teamMembers.length > 0;
            if (!hasTeamMembers) {
                document.getElementById('team-members-error').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('team-members-error').style.display = 'none';
            }
            
            // Validate projects
            const projects = document.querySelectorAll('#customer-profile-edit .project-item');
            const hasProjects = projects.length > 0;
            if (!hasProjects) {
                document.getElementById('projects-error').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('projects-error').style.display = 'none';
            }
            
            // Validate did you know
            const didYouKnow = document.getElementById('didYouKnow').value.trim();
            if (!didYouKnow) {
                showError('didYouKnow', 'did-you-know-error', 'Please provide an interesting fact about your company');
                isValid = false;
            } else {
                clearError('didYouKnow', 'did-you-know-error');
            }
            
            return isValid;
        }
        
        // Validate security form
        function validateSecurityForm() {
            let isValid = true;
            
            // Validate current password
            const currentPassword = document.getElementById('currentPassword').value;
            if (!currentPassword) {
                showError('currentPassword', 'current-password-error', 'Please enter your current password');
                isValid = false;
            } else {
                clearError('currentPassword', 'current-password-error');
            }
            
            // Validate new password
            const newPassword = document.getElementById('newPassword').value;
            if (!validatePassword(newPassword)) {
                showError('newPassword', 'new-password-error', 'Please enter a valid new password');
                isValid = false;
            } else {
                clearError('newPassword', 'new-password-error');
            }
            
            // Validate confirm password
            const confirmPassword = document.getElementById('confirmPassword').value;
            if (newPassword !== confirmPassword) {
                showError('confirmPassword', 'confirm-password-error', 'Passwords do not match');
                isValid = false;
            } else {
                clearError('confirmPassword', 'confirm-password-error');
            }
            
            return isValid;
        }

        // --- DOMContentLoaded Start ---
        document.addEventListener('DOMContentLoaded', function () {
            
            // --- 1. Main Tab Navigation ---
            const navLinks = document.querySelectorAll('.settings-nav a');
            const sections = document.querySelectorAll('.settings-section');
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    if(this.getAttribute('href') !== '#logout') { 
                        e.preventDefault(); 
                    }
                    
                    navLinks.forEach(link => link.classList.remove('active'));
                    sections.forEach(section => section.classList.remove('active'));
                    
                    this.classList.add('active');
                    
                    const targetId = this.getAttribute('href').substring(1);
                    const targetSection = document.getElementById(targetId);
                    if(targetSection) {
                        targetSection.classList.add('active');
                    }
                });
            });
            
            // --- 2. Profile Sub-tabs Navigation ---
            const profileTabs = document.querySelectorAll('.profile-tab');
            const profileContents = document.querySelectorAll('.profile-content');
            
            profileTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const targetTab = this.getAttribute('data-tab');
                    
                    profileTabs.forEach(t => t.classList.remove('active'));
                    profileContents.forEach(c => c.classList.remove('active'));
                    
                    this.classList.add('active');
                    document.getElementById(`${targetTab}-profile`).classList.add('active');
                });
            });
            
            // --- 3. Worker Profile Edit/Cancel Functionality ---
            const editWorkerProfileBtn = document.getElementById('edit-worker-profile-btn');
            const cancelWorkerEditBtn = document.getElementById('cancel-worker-edit-btn');
            const workerProfileDisplay = document.getElementById('worker-profile-display');
            const workerProfileEdit = document.getElementById('worker-profile-edit');
            
            if (editWorkerProfileBtn) {
                editWorkerProfileBtn.addEventListener('click', function() {
                    workerProfileDisplay.style.display = 'none';
                    workerProfileEdit.style.display = 'block';
                });
            }
            
            if (cancelWorkerEditBtn) {
                cancelWorkerEditBtn.addEventListener('click', function() {
                    workerProfileDisplay.style.display = 'block';
                    workerProfileEdit.style.display = 'none';
                });
            }
            
            // --- 4. Customer Profile Edit/Cancel Functionality ---
            const editCustomerProfileBtn = document.getElementById('edit-customer-profile-btn');
            const cancelCustomerEditBtn = document.getElementById('cancel-customer-edit-btn');
            const customerProfileDisplay = document.getElementById('customer-profile-display');
            const customerProfileEdit = document.getElementById('customer-profile-edit');
            
            if (editCustomerProfileBtn) {
                editCustomerProfileBtn.addEventListener('click', function() {
                    customerProfileDisplay.style.display = 'none';
                    customerProfileEdit.style.display = 'block';
                });
            }
            
            if (cancelCustomerEditBtn) {
                cancelCustomerEditBtn.addEventListener('click', function() {
                    customerProfileDisplay.style.display = 'block';
                    customerProfileEdit.style.display = 'none';
                });
            }
            
            // --- 5. Company size selector (Worker Profile) ---
            const companySizeOptions = document.querySelectorAll('.company-size-option');
            companySizeOptions.forEach(option => {
                option.addEventListener('click', function() {
                    companySizeOptions.forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    const radio = this.querySelector('input');
                    radio.checked = true;
                });
            });

            // --- 6. Dynamic Content Buttons (Worker & Customer Profiles) ---
            const addOpeningBtn = document.getElementById('add-opening-btn');
            const openingsContainer = document.getElementById('openings-container');
            if(addOpeningBtn && openingsContainer) {
                addOpeningBtn.addEventListener('click', function() {
                    const newOpeningDiv = document.createElement('div');
                    newOpeningDiv.className = 'dynamic-item-edit';
                    newOpeningDiv.innerHTML = `
                        <input type="text" class="form-control" placeholder="Job Title" required>
                        <button type="button" class="btn btn-danger" onclick="this.parentElement.remove()">Remove</button>
                    `;
                    openingsContainer.insertBefore(newOpeningDiv, addOpeningBtn);
                });
            }

            const addTeamMemberBtn = document.getElementById('add-team-member-btn');
            const teamMemberContainer = document.getElementById('team-member-container');
            
            if (addTeamMemberBtn && teamMemberContainer) {
                addTeamMemberBtn.addEventListener('click', function() {
                    const newMemberInput = createTeamMemberInput();
                    // Insert the new member *before* the add button
                    teamMemberContainer.insertBefore(newMemberInput, addTeamMemberBtn);
                });
            }

            const addProjectBtn = document.getElementById('add-project-btn');
            const projectContainer = document.getElementById('project-container');
            
            if (addProjectBtn && projectContainer) {
                addProjectBtn.addEventListener('click', function() {
                    const newProjectInput = createProjectInput();
                    // Insert the new project *before* the add button
                    projectContainer.insertBefore(newProjectInput, addProjectBtn);
                });
            }

            // --- 7. Worker profile form submission (JSON data) ---
            const workerProfileForm = document.getElementById('worker-profile-edit');
            if (workerProfileForm) {
                workerProfileForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    // Validate form before submission
                    if (!validateWorkerProfile()) {
                        showAlert('Please fix the errors in the form before submitting.', 'error');
                        return;
                    }
                    
                    const formData = {
                        profileType: 'worker',
                        companyName: document.getElementById('companyName').value,
                        companyLocation: document.getElementById('companyLocation').value,
                        companySize: document.querySelector('input[name="companySize"]:checked').value,
                        specializations: document.getElementById('specializations').value,
                        aboutCompany: document.getElementById('aboutCompany').value,
                        whyJoinUs: document.getElementById('whyJoinUs').value,
                        currentOpenings: Array.from(document.querySelectorAll('#openings-container .dynamic-item-edit input'))
                                             .map(input => input.value)
                    };
        
                    try {
                        const response = await fetch('/update-company-profile', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: JSON.stringify(formData)
                        });
                        
                        let result;
                        const contentType = response.headers.get('content-type');
                        
                        if (contentType && contentType.includes('application/json')) {
                            result = await response.json();
                        } else {
                            const htmlError = await response.text();
                            console.error('Server returned HTML instead of JSON (Worker Profile). Check server logs/network for redirect/error details.', htmlError);
                            throw new Error('Server returned an unexpected response format (likely an HTML error page/redirect).');
                        }

                        if (!response.ok) {
                            throw new Error(result.message || 'Failed to update profile');
                        }
        
                        // NOTE: To fully update the UI, you would ideally reload the page
                        // or manually update every single field on the display side.
                        // For simplicity, we just show success and toggle the view.
                        
                        workerProfileDisplay.style.display = 'block';
                        workerProfileEdit.style.display = 'none';
                        showAlert('Worker Profile updated successfully! Please refresh to see all changes.', 'success');
                    } catch (error) {
                        console.error('Error:', error);
                        showAlert('Error updating worker profile: ' + error.message, 'error');
                    }
                });
            }
            
            // --- 8. Customer profile form submission (FormData, handles files) ---
            const customerProfileForm = document.getElementById('customer-profile-edit');
            if (customerProfileForm) {
                customerProfileForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    
                    // Validate form before submission
                    if (!validateCustomerProfile()) {
                        showAlert('Please fix the errors in the form before submitting.', 'error');
                        return;
                    }
        
                    // Using FormData for file uploads
                    const formData = new FormData();
                    
                    // Add text fields
                    formData.append('profileType', 'customer');
                    formData.append('companyName', document.getElementById('customerCompanyName').value);
                    formData.append('companyLocation', document.getElementById('customerCompanyLocation').value);
                    formData.append('projectsCompleted', document.getElementById('projectsCompleted').value);
                    formData.append('yearsInBusiness', document.getElementById('yearsInBusiness').value);
                    formData.append('customerAboutCompany', document.getElementById('customerAboutCompany').value);
                    formData.append('didYouKnow', document.getElementById('didYouKnow').value);

                    // Process team members and add image files
                    const teamMembers = [];
                    const teamMemberInputs = document.querySelectorAll('#customer-profile-edit .team-member');
                    teamMemberInputs.forEach((member, index) => {
                        const name = member.querySelector('input[type="text"]:nth-of-type(1)').value;
                        const position = member.querySelector('input[type="text"]:nth-of-type(2)').value;
                        const fileInput = member.querySelector('input[type="file"]');
                        
                        // Only append new files
                        if (fileInput.files[0]) {
                            formData.append('memberImages', fileInput.files[0], `member_image_${index}`); 
                        }
                        teamMembers.push({ name, position, image: member.querySelector('img').src }); 
                    });
                    formData.append('teamMembers', JSON.stringify(teamMembers));

                    // Process completed projects and add image files
                    const completedProjects = [];
                    const projectInputs = document.querySelectorAll('#customer-profile-edit .project-item');
                    projectInputs.forEach((project, index) => {
                        const title = project.querySelector('input[type="text"]').value;
                        const description = project.querySelector('textarea').value;
                        const fileInput = project.querySelector('input[type="file"]');
                        
                        // Only append new files
                        if (fileInput.files[0]) {
                            formData.append('projectImages', fileInput.files[0], `project_image_${index}`);
                        }
                        completedProjects.push({ title, description, image: project.querySelector('img').src }); 
                    });
                    formData.append('completedProjects', JSON.stringify(completedProjects));

                    try {
                        const response = await fetch('/update-company-profile', {
                            method: 'POST',
                            // Do NOT set Content-Type here; FormData handles it
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: formData
                        });
                        
                        // Correctly check response type (avoids HTML-as-JSON error)
                        let result;
                        const contentType = response.headers.get('content-type');

                        if (contentType && contentType.includes('application/json')) {
                            result = await response.json();
                        } else {
                            const htmlError = await response.text(); 
                            console.error('Server returned HTML instead of JSON (Customer Profile). Check server logs/network for redirect/error details.', htmlError);
                            throw new Error('Server returned an unexpected response format (likely an HTML error page/redirect).');
                        }
        
                        if (!response.ok) {
                            throw new Error(result.message || 'Failed to update profile (Server Error)');
                        }
                        
                        // SUCCESS: Hide edit form and show display mode
                        document.getElementById('customer-profile-display').style.display = 'block';
                        document.getElementById('customer-profile-edit').style.display = 'none';

                        showAlert('Customer Profile updated successfully! Please refresh to see all changes.', 'success');
                        
                    } catch (error) {
                        console.error('Error:', error);
                        showAlert('Error updating profile: ' + error.message, 'error');
                    }
                });
            }
            
            // --- 9. Security form validation and submission ---
            const securityForm = document.getElementById('security-form');
            if (securityForm) {
                // Real-time password validation
                const newPasswordInput = document.getElementById('newPassword');
                if (newPasswordInput) {
                    newPasswordInput.addEventListener('input', function() {
                        validatePassword(this.value);
                    });
                }
                
                // Form submission
                securityForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    if (!validateSecurityForm()) {
                        showAlert('Please fix the errors in the form before submitting.', 'error');
                        return;
                    }
                    
                    // If validation passes, submit the form
                    // This would typically be an API call to update the password
                    showAlert('Password updated successfully!', 'success');
                    securityForm.reset();
                    
                    // Reset password requirements UI
                    document.querySelectorAll('.password-requirements .requirement').forEach(req => {
                        req.className = 'requirement invalid';
                    });
                });
            }
        });
        // --- DOMContentLoaded End ---
    </script>      
</body>
</html>