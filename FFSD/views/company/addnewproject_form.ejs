<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Construction Project</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }
        body {
            background-color: #f5f5f7;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 30px;
        }
        h1 {
            color: #333;
            margin-bottom: 30px;
            font-size: 24px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #444;
        }
        input[type="text"],
        input[type="number"],
        input[type="date"],
        textarea,
        select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
        }
        .progress-container {
            margin-top: 10px;
        }
        .progress-input {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        .progress-input input {
            flex: 1;
        }
        .progress-value {
            min-width: 45px;
            text-align: right;
        }
        .update-container {
            margin-top: 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
        }
        .image-upload {
            margin-top: 10px;
        }
        .btn-container {
            margin-top: 30px;
            display: flex;
            gap: 15px;
        }
        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .btn-primary {
            background-color: #5257f2;
            color: white;
        }
        .btn-primary:hover {
            background-color: #4046e2;
        }
        .btn-secondary {
            background-color: #e5e5e5;
            color: #333;
        }
        .btn-secondary:hover {
            background-color: #d5d5d5;
        }
        
        /* Validation styles */
        .error-message {
            color: #e74c3c;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        .input-error {
            border-color: #e74c3c;
        }
        .input-success {
            border-color: #2ecc71;
        }
        .validation-summary {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: none;
        }
        .validation-summary ul {
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Edit Construction Project</h1>
        
        <div id="validationSummary" class="validation-summary">
            <p>Please correct the following errors:</p>
            <ul id="validationList"></ul>
        </div>
        
        <form id="constructionProjectForm" action="/api/projects/update" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="projectId" value="<%= project._id %>">

            <div class="form-group">
                <label for="completionPercentage">Project Completion Percentage</label>
                <div class="progress-container">
                    <div class="progress-input">
                        <input type="range" id="completionPercentage" name="completionPercentage" min="0" max="100" value="<%= project.completionPercentage || 0 %>" oninput="updateProgressValue(this.value)">
                        <span id="progressValue" class="progress-value"><%= project.completionPercentage || 0 %>%</span>
                    </div>
                </div>
                <div id="completionPercentageError" class="error-message">Completion percentage is required</div>
            </div>
            
            <div class="form-group">
                <label for="targetCompletionDate">Target Completion Date</label>
                <input type="date" id="targetCompletionDate" name="targetCompletionDate" value="<%= project.targetCompletionDate ? project.targetCompletionDate.toISOString().split('T')[0] : '' %>" required>
                <div id="targetCompletionDateError" class="error-message">Target completion date is required and must be a future date</div>
            </div>
            
            <div class="form-group">
                <label for="currentPhase">Current Phase</label>
                <select id="currentPhase" name="currentPhase" required>
                    <option value="">Select current phase</option>
                    <option value="Foundation" <%= project.currentPhase === 'Foundation' ? 'selected' : '' %>>Foundation</option>
                    <option value="Structure" <%= project.currentPhase === 'Structure' ? 'selected' : '' %>>Structure</option>
                    <option value="Interior work" <%= project.currentPhase === 'Interior work' ? 'selected' : '' %>>Interior work</option>
                    <option value="Finishing" <%= project.currentPhase === 'Finishing' ? 'selected' : '' %>>Finishing</option>
                </select>
                <div id="currentPhaseError" class="error-message">Current phase is required</div>
            </div>
            
            <div class="form-group">
                <label for="mainImage">Main Project File</label>
                <input type="file" id="mainImage" name="mainImage" accept=".pdf,.jpg,.jpeg,.png" class="image-upload">
                <div id="mainImageError" class="error-message">File must be a PDF, JPG, JPEG, or PNG and cannot exceed 5MB</div>
            </div>
            
            <div class="form-group">
                <label for="additionalImages">Additional Project Files</label>
                <input type="file" id="additionalImages" name="additionalImages" accept=".pdf,.jpg,.jpeg,.png" multiple class="image-upload">
                <div id="additionalImagesError" class="error-message">Files must be PDF, JPG, JPEG, or PNG and each cannot exceed 5MB</div>
            </div>
            
            <div class="form-group">
                <label>Recent Updates</label>
                <div class="update-container">
                    <div class="form-group">
                        <label for="update1">Update 1</label>
                        <textarea id="update1" name="updates[]" rows="3" placeholder="e.g. Interior work is progressing as planned."></textarea>
                        <div id="update1Error" class="error-message">Update text cannot exceed 500 characters</div>
                    </div>
                    <div class="form-group">
                        <label for="updateImage1">Update File</label>
                        <input type="file" id="updateImage1" name="updateImages" accept=".pdf,.jpg,.jpeg,.png" class="image-upload">
                        <div id="updateImage1Error" class="error-message">File must be a PDF, JPG, JPEG, or PNG and cannot exceed 5MB</div>
                    </div>
                </div>
            </div>
            
            <div class="btn-container">
                <button type="submit" class="btn btn-primary">Save Project</button>
                <button type="button" class="btn btn-secondary" onclick="window.history.back()">Cancel</button>
            </div>
        </form>
    </div>
    
    <script>
        // Update progress value display
        function updateProgressValue(value) {
            document.getElementById('progressValue').innerText = value + '%';
        }
        
        // Validation functions
        function validateForm() {
            let isValid = true;
            const errors = [];
            
            // Clear previous validation states
            clearValidation();
            
            // Validate completion percentage
            const completionPercentage = document.getElementById('completionPercentage').value;
            if (!completionPercentage || completionPercentage < 0 || completionPercentage > 100) {
                showError('completionPercentageError', 'Completion percentage must be between 0 and 100');
                isValid = false;
                errors.push('Completion percentage must be between 0 and 100');
            }
            
            // Validate target completion date
            const targetCompletionDate = document.getElementById('targetCompletionDate').value;
            if (!targetCompletionDate) {
                showError('targetCompletionDateError', 'Target completion date is required');
                isValid = false;
                errors.push('Target completion date is required');
            } else {
                const today = new Date();
                const selectedDate = new Date(targetCompletionDate);
                if (selectedDate <= today) {
                    showError('targetCompletionDateError', 'Target completion date must be in the future');
                    isValid = false;
                    errors.push('Target completion date must be in the future');
                }
            }
            
            // Validate current phase
            const currentPhase = document.getElementById('currentPhase').value;
            if (!currentPhase) {
                showError('currentPhaseError', 'Current phase is required');
                isValid = false;
                errors.push('Current phase is required');
            }
            
            // Validate main image file
            const mainImage = document.getElementById('mainImage').files[0];
            if (mainImage && !validateFile(mainImage)) {
                showError('mainImageError', 'Main file must be a PDF, JPG, JPEG, or PNG and cannot exceed 5MB');
                isValid = false;
                errors.push('Main file must be a PDF, JPG, JPEG, or PNG and cannot exceed 5MB');
            }
            
            // Validate additional images
            const additionalImages = document.getElementById('additionalImages').files;
            if (additionalImages.length > 0) {
                for (let i = 0; i < additionalImages.length; i++) {
                    if (!validateFile(additionalImages[i])) {
                        showError('additionalImagesError', 'Additional files must be PDF, JPG, JPEG, or PNG and each cannot exceed 5MB');
                        isValid = false;
                        errors.push('Additional files must be PDF, JPG, JPEG, or PNG and each cannot exceed 5MB');
                        break;
                    }
                }
            }
            
            // Validate update text
            const update1 = document.getElementById('update1').value;
            if (update1 && update1.length > 500) {
                showError('update1Error', 'Update text cannot exceed 500 characters');
                isValid = false;
                errors.push('Update text cannot exceed 500 characters');
            }
            
            // Validate update image
            const updateImage1 = document.getElementById('updateImage1').files[0];
            if (updateImage1 && !validateFile(updateImage1)) {
                showError('updateImage1Error', 'Update file must be a PDF, JPG, JPEG, or PNG and cannot exceed 5MB');
                isValid = false;
                errors.push('Update file must be a PDF, JPG, JPEG, or PNG and cannot exceed 5MB');
            }
            
            // Show validation summary if there are errors
            if (!isValid) {
                showValidationSummary(errors);
            }
            
            return isValid;
        }
        
        function validateFile(file) {
            // Check file type
            const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
            if (!allowedTypes.includes(file.type)) {
                return false;
            }
            
            // Check file size (5MB max)
            const maxSize = 5 * 1024 * 1024; // 5MB in bytes
            if (file.size > maxSize) {
                return false;
            }
            
            return true;
        }
        
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            // Find the corresponding input element and add error class
            const inputElement = errorElement.previousElementSibling;
            if (inputElement && (inputElement.tagName === 'INPUT' || inputElement.tagName === 'SELECT' || inputElement.tagName === 'TEXTAREA')) {
                inputElement.classList.add('input-error');
            }
        }
        
        function clearValidation() {
            // Hide all error messages
            const errorMessages = document.querySelectorAll('.error-message');
            errorMessages.forEach(error => {
                error.style.display = 'none';
            });
            
            // Remove error classes from inputs
            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.classList.remove('input-error');
                input.classList.remove('input-success');
            });
            
            // Hide validation summary
            document.getElementById('validationSummary').style.display = 'none';
        }
        
        function showValidationSummary(errors) {
            const validationSummary = document.getElementById('validationSummary');
            const validationList = document.getElementById('validationList');
            
            // Clear previous list
            validationList.innerHTML = '';
            
            // Add errors to the list
            errors.forEach(error => {
                const listItem = document.createElement('li');
                listItem.textContent = error;
                validationList.appendChild(listItem);
            });
            
            // Show the summary
            validationSummary.style.display = 'block';
            
            // Scroll to the summary
            validationSummary.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        
        // Add real-time validation for some fields
        document.getElementById('update1').addEventListener('input', function() {
            const updateText = this.value;
            const errorElement = document.getElementById('update1Error');
            
            if (updateText.length > 500) {
                showError('update1Error', 'Update text cannot exceed 500 characters');
            } else {
                errorElement.style.display = 'none';
                this.classList.remove('input-error');
                if (updateText.length > 0) {
                    this.classList.add('input-success');
                }
            }
        });
        
        // Form submission handler
        window.onload = function() {
            document.getElementById('constructionProjectForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (validateForm()) {
                    const form = e.target;
                    const formData = new FormData(form);
                    
                    console.log('FormData fields:');
                    for (let [key, value] of formData.entries()) {
                        console.log(`${key}: ${value instanceof File ? value.name : value}`);
                    }
                    
                    fetch(form.action, {
                        method: form.method,
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        alert(data.message);
                        if (data.message === 'Project updated successfully') {
                            window.location.href = '/companyongoing_projects'; // Adjust redirect
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error updating project');
                    });
                }
            });
        }
    </script>
</body>
</html>