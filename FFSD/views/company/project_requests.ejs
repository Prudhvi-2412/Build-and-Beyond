<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Build & Beyond - Project Submissions</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
    /* --- CORPORATE/ESTABLISHED COLOR PALETTE --- */
    :root {
        --primary-accent: #004D7A;       /* Deep Navy Blue for Authority/Trust */
        --primary-accent-hover: #003355; /* Darker Navy for interaction */
        --background-light: #F8F9FA;     /* Very light, soft grey background */
        --content-light: #FFFFFF;        /* Pure white for cards */
        --text-primary: #212529;         /* Dark charcoal for main text */
        --text-secondary: #6C757D;       /* Medium grey for labels */
        --highlight-color: #A06700;      /* Muted Gold/Amber for emphasis/proposal */
        --border-light: #D1D5DB;         /* Clean, soft border */
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.08); /* Soft shadow */
        --card-radius: 8px;
        --button-secondary-bg: #E9ECEF;
        
        /* Status Colors for Light Mode */
        --status-pending-bg: #FFF3CD;
        --status-pending-text: #856404;
        --status-accepted-bg: #D4EDDA;
        --status-accepted-text: #155724;
        --status-rejected-bg: #F8D7DA;
        --status-rejected-text: #721C24;

        /* Mapped Variables */
        --primary-green: var(--primary-accent);
        --secondary-green: var(--primary-accent-hover);
        --light-green: #E6F0F8; 
        --dark-grey: var(--text-primary);
        --medium-grey: var(--text-secondary);
        --light-grey: var(--border-light);
        --white: var(--content-light);
        --black: var(--text-primary);
        --border-color: var(--border-light);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: 'Poppins', sans-serif;
    }

    body {
        background-color: var(--background-light); 
        color: var(--text-primary); 
        line-height: 1.6;
    }

    /* --- DASHBOARD STRUCTURE --- */

    .dashboard {
        padding: 3rem 2.5rem;
        max-width: 1440px;
        margin: 0 auto;
    }

    .dashboard-header {
        margin-bottom: 2rem;
        padding-bottom: 0.5rem;
        border-bottom: 3px solid var(--border-color);
    }

    .dashboard-title {
        font-size: 2.2rem;
        color: var(--primary-accent);
        font-weight: 700;
        letter-spacing: -0.5px;
    }

    .cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr)); 
        gap: 2rem; 
    }

    /* --- CARD STYLING (LIST ITEM) --- */

    .card {
        background-color: var(--white);
        border-radius: var(--card-radius);
        overflow: hidden;
        box-shadow: var(--shadow); 
        border: 1px solid var(--border-color);
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15); 
        border-color: var(--primary-accent);
    }

    .card-header {
        background-color: var(--light-green); 
        padding: 1.5rem;
        border-bottom: 2px solid var(--primary-accent); 
    }

    .card-header h3 {
        margin-bottom: 0;
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--primary-accent);
    }
    
    .card-body {
        padding: 1.5rem;
    }

    .card-info {
        margin-bottom: 1.5rem;
        border: 1px solid var(--border-light);
        border-radius: 4px;
        padding: 1rem;
    }

    .card-info p {
        margin-bottom: 0.75rem;
        font-size: 1rem;
        display: flex;
        justify-content: space-between;
        padding-bottom: 0.5rem;
        border-bottom: 1px dashed #E0E0E0;
    }
    .card-info p:last-child {
        margin-bottom: 0;
        border-bottom: none;
        padding-bottom: 0;
    }

    .card-info strong {
        color: var(--text-secondary);
        font-weight: 500;
        min-width: 100px;
    }

    .card-info span {
        color: var(--text-primary);
        font-weight: 600;
        text-align: right;
    }

    .card-actions {
        display: flex;
        gap: 1rem;
    }

    .card-btn {
        padding: 0.8rem 1.25rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-view {
        background-color: transparent; 
        color: var(--primary-accent);
        border: 1px solid var(--primary-accent);
        flex-grow: 1;
    }

    .btn-view:hover {
        background-color: var(--primary-accent);
        color: var(--content-light); 
        box-shadow: 0 4px 8px rgba(0, 77, 122, 0.3);
    }

    .btn-accept {
        background-color: var(--highlight-color); 
        color: var(--content-light); 
        flex-basis: 60%; 
        font-weight: 700;
    }

    .btn-accept:hover {
        background-color: #B87C00; 
    }

    .btn-reject {
        background-color: var(--button-secondary-bg); 
        color: var(--text-secondary); 
        border: 1px solid var(--border-light); 
        flex-basis: 40%;
    }

    .btn-reject:hover {
        background-color: #D1D5DB; 
        color: var(--text-primary); 
    }

    /* --- MODAL STRUCTURE AND STYLING --- */

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7); 
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s linear;
    }

    .modal-backdrop.active {
        visibility: visible;
        opacity: 1;
    }

    .modal {
        background-color: var(--white);
        width: 90%;
        max-width: 900px;
        max-height: 90vh;
        border-radius: 12px;
        overflow: hidden;
        overflow-y: auto;
        transform: translateY(-20px);
        transition: transform 0.3s ease;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.4); 
        border: 3px solid var(--primary-accent); 
    }

    .modal-backdrop.active .modal {
        transform: translateY(0);
    }

    .modal-header {
        background-color: var(--background-light); 
        color: var(--text-primary); 
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid var(--border-color);
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-accent); 
    }

    .modal-status {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 1rem;
        border-radius: 4px;
        font-size: 0.85rem;
        font-weight: 700;
        text-transform: uppercase;
        margin-left: 1rem;
        border: 1px solid; /* Defined by status classes */
    }

    .modal-close {
        background: none;
        border: none;
        color: var(--text-primary); 
        font-size: 2rem;
        cursor: pointer;
        transition: color 0.2s;
    }

    .modal-close:hover {
        color: var(--text-secondary); 
    }

    .modal-body {
        padding: 2rem;
    }

    .detail-section {
        margin-bottom: 2.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px dashed var(--border-light);
    }

    .detail-section:last-child {
        margin-bottom: 0;
        border-bottom: none;
    }

    .detail-section h3 {
        color: var(--text-primary);
        font-weight: 700;
        margin-bottom: 1.5rem;
        font-size: 1.3rem;
        border-left: 4px solid var(--highlight-color);
        padding-left: 10px;
    }

    .detail-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .detail-item strong {
        display: block;
        margin-bottom: 0.3rem;
        color: var(--text-secondary);
        font-weight: 500;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .detail-item span {
        color: var(--text-primary);
        font-size: 1rem;
        font-weight: 600;
    }
    
    .floor-box {
        background-color: var(--background-light); 
        padding: 1.5rem;
        border-radius: 6px;
        margin-bottom: 1rem;
        border: 1px solid var(--border-color);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .floor-box h4 {
        color: var(--primary-accent);
        margin-bottom: 1rem;
        font-size: 1.1rem;
        font-weight: 700;
    }
    .floor-box span {
        font-weight: 600;
        color: var(--text-primary);
    }

    .floor-badge {
        font-size: 0.85rem;
        padding: 0.3rem 0.6rem;
        border-radius: 4px;
        background-color: var(--primary-accent);
        color: var(--content-light);
        font-weight: 600;
    }

    .file-link {
        background-color: var(--button-secondary-bg);
        color: var(--primary-accent);
        border-color: var(--border-light);
        border: 1px solid;
    }
    .file-link:hover {
        background-color: #D1D5DB;
        color: var(--primary-accent-hover);
        text-decoration: underline;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--border-color);
    }

    .modal-btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 700;
        font-size: 1rem;
    }

    .modal-btn-accept {
        background-color: var(--highlight-color); 
        color: var(--content-light);
    }

    .modal-btn-accept:hover {
        background-color: #B87C00;
    }

    .modal-btn-reject {
        background-color: var(--status-rejected-bg); 
        color: var(--status-rejected-text); 
        border: 1px solid var(--status-rejected-text); 
    }

    .modal-btn-reject:hover {
        background-color: var(--status-rejected-text); 
        color: var(--content-light); 
    }

    /* --- PROPOSAL MODAL STYLING --- */
    
    .proposal-modal { 
        position: fixed; 
        z-index: 1001; 
        left: 0; 
        top: 0; 
        width: 100%; 
        height: 100%; 
        background-color: rgba(0,0,0,0.6); 
        backdrop-filter: blur(5px); 
        align-items: center; 
        justify-content: center; 
        display: none;
    }
    .proposal-modal.active { display: flex; }
    
    .proposal-modal-content { 
        background-color: var(--white);
        border-radius: 12px; 
        width: 90%; max-width: 500px;
        border: 3px solid var(--primary-accent); 
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.3);
    }
    .proposal-modal-header { 
        padding: 1rem 1.5rem; 
        border-bottom: 2px solid var(--border-light); 
        background-color: var(--background-light);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .proposal-modal-header h3 {
        color: var(--text-primary);
        font-weight: 700;
        font-size: 1.3rem;
    }
    .proposal-modal-body { padding: 1.5rem; }
    .proposal-form-group { margin-bottom: 1.5rem; }
    .proposal-form-label { 
        display: block; margin-bottom: 0.5rem; 
        font-weight: 600; 
        color: var(--text-primary); 
    }
    .proposal-form-control { 
        width: 100%; padding: 0.8rem; 
        border: 1px solid var(--border-light); 
        border-radius: 4px; 
        background-color: var(--background-light); 
        color: var(--text-primary); 
        font-size: 1rem; 
    }
    .proposal-form-control:focus { 
        outline: none; border-color: var(--primary-accent); 
        box-shadow: 0 0 0 3px rgba(0, 77, 122, 0.1);
    }
    .proposal-btn-primary { 
        padding: 0.8rem 1.8rem; 
        background-color: var(--primary-accent); 
        color: var(--content-light); 
        border: none; border-radius: 6px; 
        font-weight: 700; cursor: pointer; 
        transition: background-color 0.2s; 
        width: 100%;
        box-shadow: 0 4px 8px rgba(0, 77, 122, 0.2);
    }
    .proposal-btn-primary:hover { 
        background-color: var(--primary-accent-hover); 
    }

    /* Validation Styles */
    .error-message {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 0.5rem;
        display: none;
        font-weight: 500;
    }

    .warning-message {
        color: #e67e22;
        font-size: 0.85rem;
        margin-top: 0.5rem;
        display: none;
        font-weight: 500;
    }

    .input-error {
        border-color: #e74c3c !important;
        background-color: #fdf2f2;
    }

    .input-success {
        border-color: #2ecc71 !important;
        background-color: #f2fdf2;
    }

    .char-counter {
        font-size: 0.8rem;
        color: var(--text-secondary);
        text-align: right;
        margin-top: 0.25rem;
    }

    .char-counter.warning {
        color: #e67e22;
    }

    .char-counter.error {
        color: #e74c3c;
    }
    
    /* Status Badge Color Definitions */
    .status-pending {
        background-color: var(--status-pending-bg);
        color: var(--status-pending-text);
    }
    .status-accepted {
        background-color: var(--status-accepted-bg);
        color: var(--status-accepted-text);
    }
    .status-rejected {
        background-color: var(--status-rejected-bg);
        color: var(--status-rejected-text);
    }

    @media (max-width: 768px) {
        .dashboard { padding: 1.5rem; }
        .cards-container { grid-template-columns: 1fr; }
        .detail-grid { grid-template-columns: 1fr; }
        .card-actions { flex-direction: column; gap: 0.5rem; }
        .btn-view, .btn-accept, .btn-reject { width: 100%; flex-basis: auto; }
        .modal-actions { flex-direction: column; }
        .modal-btn { width: 100%; }
        .proposal-modal-content { max-width: 90%; }
    }
</style>
</head>
<body>
    <%- include('navbar_company') %>
    <main class="dashboard">
        <div class="dashboard-header">
            <h2 class="dashboard-title">Project Submissions</h2>
        </div>

        <div class="cards-container">
            <% projects.forEach(project => { %>
                <div class="card">
                    <div class="card-header">
                        <h3><%= project.projectName %></h3>
                    </div>
                    <div class="card-body">
                        <div class="card-info">
                            <p><strong>Customer</strong> <span><%= project.customerName %></span></p>
                            <p><strong>Contact</strong> <span><%= project.customerPhone %></span></p>
                            <p><strong>Building Type</strong> <span><%= project.buildingType.charAt(0).toUpperCase() + project.buildingType.slice(1) %></span></p>
                            <p><strong>Total Area</strong> <span><%= project.totalArea %> sq.m</span></p>
                        </div>
                        <div class="card-actions">
                            <button class="card-btn btn-view" onclick="showProjectDetails('<%= project._id %>')">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                        </div>
                        <div class="card-actions" style="margin-top: 1rem;">
                            <% if(project.status == 'proposal_sent'){ %>
                                <div style="color: red;"> Proposal already sent </div>
                            <%}else{ %>
                                <button class="card-btn btn-accept proposal-create-btn" 
                                        data-project-id="<%= project._id %>"
                                        data-project-budget="<%= project.estimatedBudget || 0 %>">
                                    <i class="fas fa-file-signature"></i> Create Proposal
                                </button>
                                <button class="card-btn btn-reject" onclick="updateProjectStatus('<%= project._id %>', 'rejected')">
                                    <i class="fas fa-times"></i> Reject
                                </button>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    </main>

    <div class="proposal-modal" id="proposalModal">
        <div class="proposal-modal-content">
            <div class="proposal-modal-header">
                <h3>Create Proposal</h3>
                <button class="modal-close" onclick="closeProposalModal()">×</button>
            </div>
            <div class="proposal-modal-body">
                <form id="proposalForm" action="/company/submit-proposal" method="POST">
                    <input type="hidden" name="projectId" id="proposalProjectId">
                    <div class="proposal-form-group">
                        <label class="proposal-form-label">Project Price (₹)</label>
                        <input type="number" name="price" required class="proposal-form-control" 
                               min="10000" step="10000" id="projectPrice" oninput="validatePrice()">
                        <div id="priceError" class="error-message" style="display: none;">
                            Price must be less than ₹<span id="maxBudget"></span>
                        </div>
                        <div id="priceWarning" class="warning-message" style="display: none;">
                            Note: Customer budget not specified. You can proceed with your proposal.
                        </div>
                    </div>
                    <div class="proposal-form-group">
                        <label class="proposal-form-label">Scope of Work</label>
                        <textarea name="description" rows="4" required class="proposal-form-control" 
                                  id="scopeOfWork" oninput="validateScope()" maxlength="2000"></textarea>
                        <div class="char-counter" id="charCounter">0/2000 characters</div>
                        <div id="scopeError" class="error-message" style="display: none;">
                            Scope of work is required
                        </div>
                    </div>
                    <button type="submit" class="proposal-btn-primary">Send Proposal</button>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-backdrop" id="projectModal">
        <div class="modal">
            <div class="modal-header">
                <div>
                    <span class="modal-title" id="modalTitle">Project Details</span>
                    <span class="modal-status status-pending" id="modalStatus">Pending</span>
                </div>
                <button class="modal-close" id="closeModal">×</button>
            </div>
            <div class="modal-body" id="modalContent">
                </div>
        </div>
    </div>

    <script>
        // --- Modal Helper Functions ---

        let maxBudget = 0;
        let currentProjectData = null;

        function closeModal() {
            document.getElementById('projectModal').classList.remove('active');
        }
        
        function closeProposalModal() {
            document.getElementById('proposalModal').classList.remove('active');
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        function getStatusText(status) {
            const statusMap = {
                'pending': 'Pending',
                'accepted': 'Accepted',
                'rejected': 'Rejected'
            };
            return statusMap[status] || status.charAt(0).toUpperCase() + status.slice(1);
        }

        // --- Fetch Details and Populate Modal ---

        async function showProjectDetails(projectId) {
            try {
                const response = await fetch(`/api/projects/${projectId}`);
                if (!response.ok) throw new Error('Failed to fetch project details.');
                
                const project = await response.json();
                currentProjectData = project; // Store project data for validation

                const modalTitle = document.getElementById('modalTitle');
                const modalStatus = document.getElementById('modalStatus');
                const modalContent = document.getElementById('modalContent');

                // 1. Set Header Info
                modalTitle.textContent = `${project.projectName}`;
                modalStatus.textContent = getStatusText(project.status);
                modalStatus.className = `modal-status status-${project.status.toLowerCase()}`;
                
                // 2. Build Floor HTML
                let floorsHtml = '';
                if (project.floors && project.floors.length > 0) {
                    project.floors.forEach(floor => {
                        floorsHtml += `
                            <div class="floor-box">
                                <div class="detail-grid" style="grid-template-columns: 1fr 1fr;">
                                    <h4 style="grid-column: 1 / -1; display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem; padding-bottom: 0;">
                                        Floor ${floor.floorNumber}
                                        <span class="floor-badge">${floor.floorType ? floor.floorType.charAt(0).toUpperCase() + floor.floorType.slice(1) : 'N/A'}</span>
                                    </h4>
                                    <div class="detail-item">
                                        <strong>Area:</strong>
                                        <span>${floor.floorArea} sq.m</span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Floor Type:</strong>
                                        <span>${floor.floorType ? floor.floorType.charAt(0).toUpperCase() + floor.floorType.slice(1) : 'N/A'}</span>
                                    </div>
                                    <div class="detail-item detail-full">
                                        <strong>Description:</strong>
                                        <span>${floor.floorDescription || 'None provided'}</span>
                                    </div>
                                    ${floor.floorImage ? `
                                        <div class="detail-item detail-full">
                                            <strong>Floor Plan:</strong>
                                            <img src="${floor.floorImage}" alt="Floor ${floor.floorNumber} Plan" class="floor-plan-image">
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        `;
                    });
                } else {
                    floorsHtml = `<p style="color: var(--text-secondary);">No detailed floor plans were provided.</p>`;
                }
                
                let html;
                if(project.status == 'proposal_sent'){
                    html = ` <div style='color: red;'> Proposal already sent </div>`;
                }
                else{
                    html = `<button class="modal-btn btn-accept proposal-create-btn" 
                                data-project-id="${project._id}"
                                data-project-budget="${project.estimatedBudget || 0}">
                            <i class="fas fa-file-signature"></i> Create Proposal
                        </button>
                        <button class="modal-btn modal-btn-reject" onclick="updateProjectStatus('${project._id}', 'rejected')">
                            <i class="fas fa-times"></i> Reject Project
                        </button>`
                }
                // 3. Build Modal Content HTML
                modalContent.innerHTML = `
                    <div class="detail-section">
                        <h3>Customer Information</h3>
                        <div class="detail-grid">
                            <div class="detail-item"><strong>Name:</strong><span>${project.customerName}</span></div>
                            <div class="detail-item"><strong>Email:</strong><span>${project.customerEmail}</span></div>
                            <div class="detail-item"><strong>Phone:</strong><span>${project.customerPhone}</span></div>
                            <div class="detail-item"><strong>Submission Date:</strong><span>${formatDate(project.createdAt)}</span></div>
                        </div>
                    </div>

                    <div class="detail-section">
                        <h3>Project Details</h3>
                        <div class="detail-grid">
                            <div class="detail-item"><strong>Building Type:</strong><span>${project.buildingType.charAt(0).toUpperCase() + project.buildingType.slice(1)}</span></div>
                            <div class="detail-item"><strong>Total Area:</strong><span>${project.totalArea} sq.m</span></div>
                            ${project.estimatedBudget ? `
                                <div class="detail-item"><strong>Budget:</strong><span style="color: var(--highlight-color);">₹${project.estimatedBudget.toLocaleString('en-IN')}</span></div>
                            ` : ''}
                            ${project.projectTimeline ? `
                                <div class="detail-item"><strong>Timeline:</strong><span>${project.projectTimeline} months</span></div>
                            ` : ''}
                            <div class="detail-item detail-full"><strong>Address:</strong><span>${project.projectAddress}</span></div>
                        </div>
                    </div>

                    <div class="detail-section">
                        <h3>Floor Plans (${project.floors ? project.floors.length : 0})</h3>
                        ${floorsHtml}
                    </div>

                    <div class="detail-section">
                        <h3>Additional Requirements</h3>
                        <div class="detail-grid">
                            ${project.specialRequirements ? `<div class="detail-item detail-full"><strong>Special Requirements:</strong><span>${project.specialRequirements}</span></div>` : ''}
                            ${project.accessibilityNeeds ? `<div class="detail-item"><strong>Accessibility Needs:</strong><span>${project.accessibilityNeeds.charAt(0).toUpperCase() + project.accessibilityNeeds.slice(1)}</span></div>` : ''}
                            ${project.energyEfficiency ? `<div class="detail-item"><strong>Energy Efficiency:</strong><span>${project.energyEfficiency.charAt(0).toUpperCase() + project.energyEfficiency.slice(1)}</span></div>` : ''}
                            ${(project.siteFilepaths && project.siteFilepaths.length > 0) ? `
                                <div class="detail-item detail-full">
                                    <strong>Site Plans:</strong>
                                    <div class="file-links-container">
                                        ${project.siteFilepaths.map(path => `<a href="${path}" class="file-link" target="_blank" rel="noopener noreferrer"><i class="fas fa-file-alt"></i> ${path.split('/').pop()}</a>`).join('')}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <div class="modal-actions">
                        ${html}
                    </div>
                `;

                // 4. Show the Modal
                document.getElementById('projectModal').classList.add('active');
            } catch (error) {
                console.error('Error fetching project details:', error);
                alert('Failed to load project details. Check the API endpoint and data format.');
            }
        }

        // --- Status Update Function ---

        async function updateProjectStatus(projectId, status) {
            if (!confirm(`Are you sure you want to ${status} this project?`)) {
                return;
            }
            try {
                const response = await fetch(`/api/projects/${projectId}/status`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status })
                });

                if (response.ok) {
                    alert(`Project ${status} successfully!`);
                    closeModal(); // Close modal on success
                    location.reload(); 
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update status');
                }
            } catch (error) {
                console.error('Error updating project status:', error);
                alert('Failed to update project status.');
            }
        }

        // --- Proposal Modal Functions ---

        function openProposalModal(projectId, projectBudget) {
            document.getElementById('proposalProjectId').value = projectId;
            maxBudget = projectBudget || 0;
            
            // Update budget display
            const maxBudgetElement = document.getElementById('maxBudget');
            if (maxBudgetElement) {
                maxBudgetElement.textContent = maxBudget.toLocaleString('en-IN');
            }
            
            // Clear previous inputs and errors
            document.getElementById('projectPrice').value = '';
            document.getElementById('scopeOfWork').value = '';
            clearProposalValidation();
            
            // Show appropriate messages based on budget
            const priceError = document.getElementById('priceError');
            const priceWarning = document.getElementById('priceWarning');
            
            if (maxBudget === 0) {
                priceError.style.display = 'none';
                priceWarning.style.display = 'block';
            } else {
                priceError.style.display = 'none';
                priceWarning.style.display = 'none';
            }
            
            document.getElementById('proposalModal').classList.add('active');
            
            console.log('Opening proposal modal:', {
                projectId: projectId,
                maxBudget: maxBudget
            });
        }

        function validatePrice() {
            const priceInput = document.getElementById('projectPrice');
            const priceError = document.getElementById('priceError');
            const priceWarning = document.getElementById('priceWarning');
            const price = parseFloat(priceInput.value) || 0;

            // Hide both messages initially
            priceError.style.display = 'none';
            priceWarning.style.display = 'none';

            if (maxBudget === 0) {
                // No budget specified - show warning but allow submission
                if (price < 10000) {
                    priceError.textContent = 'Price must be at least ₹10,000';
                    priceError.style.display = 'block';
                    priceInput.classList.add('input-error');
                    return false;
                } else {
                    priceWarning.style.display = 'block';
                    priceInput.classList.remove('input-error');
                    return true;
                }
            } else {
                // Budget specified - validate against it
                if (price > maxBudget) {
                    priceError.textContent = `Proposal price (₹${price.toLocaleString('en-IN')}) must be less than or equal to customer's budget (₹${maxBudget.toLocaleString('en-IN')})`;
                    priceError.style.display = 'block';
                    priceInput.classList.add('input-error');
                    return false;
                } else if (price < 10000) {
                    priceError.textContent = 'Price must be at least ₹10,000';
                    priceError.style.display = 'block';
                    priceInput.classList.add('input-error');
                    return false;
                } else {
                    priceInput.classList.remove('input-error');
                    return true;
                }
            }
        }

        function validateScope() {
            const scopeInput = document.getElementById('scopeOfWork');
            const scopeError = document.getElementById('scopeError');
            const charCounter = document.getElementById('charCounter');
            const text = scopeInput.value.trim();
            const charCount = text.length;

            // Update character counter
            if (charCounter) {
                charCounter.textContent = `${charCount}/2000 characters`;
                charCounter.className = 'char-counter';
                if (charCount > 1500) charCounter.classList.add('warning');
                if (charCount > 1900) charCounter.classList.add('error');
            }

            if (text === '') {
                scopeError.textContent = 'Scope of work is required';
                scopeError.style.display = 'block';
                scopeInput.classList.add('input-error');
                return false;
            } else if (charCount < 10) {
                scopeError.textContent = 'Scope of work must be at least 10 characters';
                scopeError.style.display = 'block';
                scopeInput.classList.add('input-error');
                return false;
            } else {
                scopeError.style.display = 'none';
                scopeInput.classList.remove('input-error');
                return true;
            }
        }

        function clearProposalValidation() {
            document.getElementById('priceError').style.display = 'none';
            document.getElementById('priceWarning').style.display = 'none';
            document.getElementById('scopeError').style.display = 'none';
            document.getElementById('projectPrice').classList.remove('input-error');
            document.getElementById('scopeOfWork').classList.remove('input-error');
            document.getElementById('charCounter').className = 'char-counter';
            document.getElementById('charCounter').textContent = '0/2000 characters';
        }

        // --- Event Listeners ---

        document.addEventListener('DOMContentLoaded', function() {
            // Close Details Modal Listeners
            document.getElementById('closeModal').addEventListener('click', closeModal);
            document.getElementById('projectModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });
            
            // Close Proposal Modal Listener
            document.getElementById('proposalModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeProposalModal();
                }
            });
            
            // Open Proposal Modal Listener (Delegation for dynamic content)
            document.addEventListener('click', function(e) {
                const button = e.target.closest('.proposal-create-btn');
                if (button) {
                    e.preventDefault();
                    const projectId = button.dataset.projectId;
                    const projectBudget = parseFloat(button.dataset.projectBudget) || 0;
                    
                    // Close details modal if open
                    closeModal();
                    
                    // Open proposal modal with correct data
                    openProposalModal(projectId, projectBudget);
                }
            });

            // Proposal Form Submission Handler
            document.getElementById('proposalForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const isPriceValid = validatePrice();
                const isScopeValid = validateScope();
                
                if (isPriceValid && isScopeValid) {
                    this.submit();
                } else {
                    // Scroll to first error
                    const firstError = document.querySelector('.input-error');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
        });
    </script>
</body>
</html>