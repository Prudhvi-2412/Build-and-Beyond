<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUserName %></title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2ecc71;
            --background: #f4f7f6;
            --chat-bg: #ffffff;
            --text: #333;
            --text-light: #7f8c8d;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        body {
            background-color: var(--background);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .chat-container {
            width: 100%;
            max-width: 700px;
            height: 90vh;
            background: var(--chat-bg);
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        .chat-header {
            padding: 15px 20px;
            background: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .chat-header h3 {
            font-weight: 600;
        }
        .chat-messages {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        .message {
            display: flex;
            margin-bottom: 15px;
            max-width: 80%;
        }
        .message-content {
            padding: 10px 15px;
            border-radius: 20px;
            line-height: 1.4;
            position: relative;
        }
        .message-content small {
            display: block;
            font-size: 0.75rem;
            color: var(--text-light);
            margin-top: 5px;
            text-align: right;
        }
        /* Define alignment based on sender */
        /* Worker's message style: light background, left alignment (other-message) */
        .worker-message-style {
            background: #e9e9eb;
            color: var(--text);
            border-bottom-left-radius: 2px;
        }
        /* Customer's message style: blue background, right alignment (my-message) */
        .customer-message-style {
            background: var(--primary);
            color: white;
            border-bottom-right-radius: 2px;
        }
        /* Message alignment based on who sent it */
        .my-message {
            align-self: flex-end;
        }
        .other-message {
            align-self: flex-start;
        }

        .chat-input {
            border-top: 1px solid #ddd;
            padding: 15px 20px;
            display: flex;
            background: #fff;
        }
        .chat-input input[type="text"] {
            flex-grow: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            margin-right: 10px;
            font-size: 1rem;
        }
        .chat-input button {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 1rem;
            transition: background 0.3s;
        }
        .chat-input button:hover {
            background: #2980b9;
        }
        .online-status {
            font-size: 0.9rem;
            font-weight: 400;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h3>Chat with: <%= otherUserName %></h3>
            <span id="onlineStatus" class="online-status">...</span>
        </div>
        <div class="chat-messages" id="chatMessages">
            <% messages.forEach(msg => { %>
                <% const isMyMessage = msg.sender.toString() === userId.toString(); %>
                <% 
                    // Use the senderModel stored in MongoDB for correct color/style
                    const messageStyleClass = msg.senderModel === 'Customer' ? 'customer-message-style' : 'worker-message-style'; 
                %>
                <div class="message <%= isMyMessage ? 'my-message' : 'other-message' %>">
                    <div class="message-content <%= messageStyleClass %>">
                        <%= msg.message %>
                        <small><%= new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %></small>
                    </div>
                </div>
            <% }); %>
        </div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off">
            <button id="sendMessageBtn"><i class="fas fa-paper-plane"></i> Send</button>
        </div>
    </div>
    
    <!-- Load Socket.io client script -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const messageInput = document.getElementById('messageInput');
            const sendMessageBtn = document.getElementById('sendMessageBtn');
            const chatMessages = document.getElementById('chatMessages');
            const onlineStatus = document.getElementById('onlineStatus');

            // Data passed from EJS template
            const roomId = '<%= roomId %>';
            const userId = '<%= userId %>';
            const userRole = '<%= userRole %>'; // 'customer' or 'worker'

            // Function to scroll chat to the bottom
            const scrollToBottom = () => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            };

            // Join the private chat room
            socket.emit('joinRoom', { roomId, userId, userRole });
            
            // Initial scroll to bottom
            scrollToBottom();

            // Function to add a message to the UI
            const addMessageToUI = (messageData) => {
                const messageDiv = document.createElement('div');
                // Crucial for alignment: Is the sender ID equal to the logged-in user's ID?
                const isMyMessage = messageData.sender === userId;
                
                // Determine the sender's role for coloring (This determines the color/background)
                let senderModel;
                if (isMyMessage) {
                    senderModel = userRole === 'customer' ? 'Customer' : 'Worker';
                } else {
                    // If it's not my message, it must be the other person.
                    // The other person's role is the opposite of my role.
                    senderModel = userRole === 'customer' ? 'Worker' : 'Customer';
                }

                // Get the style class based on the sender's role
                const messageStyleClass = senderModel === 'Customer' ? 'customer-message-style' : 'worker-message-style';

                messageDiv.classList.add('message');
                // Alignment: always align "my" messages to the right, "other" messages to the left
                messageDiv.classList.add(isMyMessage ? 'my-message' : 'other-message');
                
                const time = new Date(messageData.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                messageDiv.innerHTML = `
                    <div class="message-content ${messageStyleClass}">
                        ${messageData.message}
                        <small>${time}</small>
                    </div>
                `;
                chatMessages.appendChild(messageDiv);
                scrollToBottom();
            };

            // Event listener for receiving messages
            socket.on('message', (messageData) => {
                // messageData from server contains: sender (ID), message, createdAt
                addMessageToUI(messageData);
            });

            // Event listener for online status
            socket.on('userStatus', (status) => {
                if (status.isOnline) {
                    onlineStatus.textContent = 'Online';
                    onlineStatus.style.color = 'var(--secondary)';
                } else {
                    onlineStatus.textContent = 'Offline';
                    onlineStatus.style.color = 'var(--text-light)';
                }
            });


            // Function to send a message
            const sendMessage = () => {
                const message = messageInput.value.trim();
                if (message) {
                    const messageData = {
                        roomId,
                        sender: userId,
                        // Crucially, tell the server the role of the user sending the message for DB saving
                        senderModel: userRole === 'customer' ? 'Customer' : 'Worker',
                        message,
                        createdAt: new Date().toISOString()
                    };
                    
                    // Send message to server for saving and broadcasting
                    socket.emit('chatMessage', messageData);
                    
                    // Add message to own UI instantly
                    addMessageToUI(messageData);

                    // Clear input
                    messageInput.value = '';
                }
            };

            sendMessageBtn.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        });
    </script>
</body>
</html>
